import $ from 'jquery'
import config from './config.js'

/**
 *
 * @param str 打印的字符串
 * @param tag 打印的标记
 * @param level 标记等级，0 ：normal, 1 : warning, 2 : error
 */
function log (str, tag, level) {
  if (!config.debug || !window.console || !console.log) {
    return
  }
  if (tag) {
    let style
    switch (level) {
      case 1:
        style = 'background-color:black;color:white'
        break
      case 2:
        style = 'background-color:red;color:white'
        break
      default :
        style = 'background-color:green;color:white'
        break
    }
    console.log('%c ' + tag + ' ', style, str)
  } else {
    console.log(str)
  }
}

/**
 * 构造类继承关系
 *
 * @param {Function} clazz 源类
 * @param {Function} baseClazz 基类
 */
function inherits (clazz, baseClazz) {
  let clazzPrototype = clazz.prototype
  function F () {}
  F.prototype = baseClazz.prototype
  clazz.prototype = new F()

  for (let prop in clazzPrototype) {
    clazz.prototype[prop] = clazzPrototype[prop]
  }
  clazz.prototype.constructor = clazz
}

function getUrlParams (url) {
  let pos
  let i
  let length
  let arr_ret = {}
  let query
  let list
  let item

  let s = url === undefined ? location.href : url
  s = s.replace(/#.+$/, '')
  pos = s.indexOf('?')
  if (pos > -1) {
    s = s.substring(pos, s.length).replace(/\+/g, '%20')
  }

  if (s.substr(0, 1) === '?' && s.length > 1) {
    query = s.substring(1, s.length)
    list = query.split('&')

    for (i = 0, length = list.length; i < length; i++) {
      item = list[i].split('=')
      if (item.length === 2) {
        arr_ret[item[0]] = decodeURIComponent(item[1])
      }
    }
  }
  return arr_ret
}

function getUrlParam (key, url) {
  let params = getUrlParams(url)
  return params[key] || ''
}

function setTitle (title) {
  if (!title) {
    return
  }
  document.title = title
  let ua = navigator.userAgent.toLowerCase()
  if (/iphone|ipad|ipod/.test(ua)) {
    let $body = $('body')
    let $iframe = $('<iframe src="/favicon.ico" style="display:none;"></iframe>')
    $iframe.on('load', function () {
      setTimeout(function () {
        $iframe.off('load').remove()
      }, 0)
    }).appendTo($body)
  }
}

function getTagParams ($dom) {
  let params = {}
  $dom.children('param').each(function () {
    let self = $(this)
    let type = self.attr('type') || 'string'
    if (type === 'string') {
      params[self.attr('id')] = self.val()
    } else if (type === 'int') {
      params[self.attr('id')] = parseInt(self.val())
    } else if (type === 'float') {
      params[self.attr('id')] = parseFloat(self.val())
    } else if (type === 'json') {
      params[self.attr('id')] = JSON.parse(self.val()) || {}
    }
  })
  return params
}

/**
 * @param {function} callback
 * @param {function} callback_single
 * @param {array} src_list : ex => ['src1','src2']
 */
function loadImage (src_list, callback_single, callback) {
  if (!$.isArray(src_list)) {
    src_list = [src_list]
  }
  let loaded_number = 0
  let total_number = src_list.length
  let img_list = {}

  function onImageLoad (i, image_dom) {
    let self = image_dom
    loaded_number++
    img_list[i] = {
      width: self.width,
      height: self.height
    }
    callback_single && callback_single(i, img_list[i], image_dom)
    // 当所有图片加载完成时，执行回调函数callback
    if (loaded_number >= total_number) {
      callback && callback(img_list)
    }
  }

  for (let i = 0; i < total_number; i++) {
    let tmp_img = new Image()
    tmp_img.src = src_list[i];
    // 当一张图片加载完成时执行
    (function (i) {
      if (tmp_img.complete) {
        onImageLoad(i, tmp_img)
      } else {
        tmp_img.onload = tmp_img.onerror = function () {
          onImageLoad(i, this)
        }
      }
    })(i)
  }
}

function resizeImageFull (image_width, image_height, parent_width, parent_height) {
  let tmp_width, tmp_height, tmp_top, tmp_left
  if (image_width / image_height > parent_width / parent_height) {
    // 图片宽比大于外框的宽比
    tmp_width = image_width / image_height * parent_height
    tmp_height = parent_height
    tmp_top = 0
    tmp_left = (parent_width - image_width / image_height * parent_height) / 2
  } else {
    tmp_height = parent_width / (image_width / image_height)
    tmp_width = parent_width
    tmp_top = Math.min((parent_height - image_height / image_width * parent_width) / 2, 0)
    tmp_left = 0
  }
  return {
    'width': tmp_width,
    'height': tmp_height,
    'margin-left': tmp_left,
    'margin-top': tmp_top
  }
}

function resizeImage (image_width, image_height, parent_width, parent_height) {
  if (image_width / image_height > parent_width / parent_height) {
    image_height = (parent_width / image_width) * image_height
    image_width = parent_width
  } else {
    image_width = (parent_height / image_height) * image_width
    image_height = parent_height
  }
  return {
    marginLeft: (parent_width - image_width) / 2,
    marginTop: (parent_height - image_height) / 2,
    width: image_width,
    height: image_height
  }
}

function dataURLtoBlob (data_url) {
  let arr = data_url.split(',')
  let mime = arr[0].match(/:(.*?);/)[1]
  let bstr = atob(arr[1])
  let n = bstr.length
  let u8arr = new Uint8Array(n)
  let blob = false
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n)
  }
  try {
    blob = new Blob([u8arr], { type: mime })
  } catch (e) {}
  return blob
}

function blobToDataURL (blob, callback) {
  let a = new FileReader()
  a.onload = function (e) { callback(e.target.result) }
  a.readAsDataURL(blob)
}

function createCanvas (width, height) {
  let dpr = Math.max(window.devicePixelRatio || 1, 1)
  let canvas = document.createElement('canvas')
  canvas.style.width = width + 'px'
  canvas.style.height = height + 'px'
  canvas.setAttribute('width', width * dpr)
  canvas.setAttribute('height', height * dpr)
  if (dpr !== 1) {
    canvas.getContext('2d').scale(dpr, dpr)
  }
  return canvas
}

function getFileExt (ar_ext) {
  let accept = []
  let i
  let length
  let mime = {
    image: 'image/*',
    audio: 'audio/*',
    video: 'video/*',
    bmp: 'image/bmp',
    gif: 'image/gif',
    ico: 'image/x-icon',
    jpg: 'image/jpeg',
    png: 'image/png',
    svg: 'image/svg+xml',
    html: 'text/html',
    apk: 'application/vnd.android.package-archive',
    bin: 'application/octet-stream',
    text: 'text/plain',
    css: 'text/css',
    mid: 'audio/mid',
    mp4: 'video/mp4',
    ogg: 'audio/ogg',
    rar: 'application/octet-stream',
    mp3: 'audio/mp3',
    ppt: 'application/vnd.ms-powerpoint',
    pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    doc: 'application/msword',
    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    xls: 'application/vnd.ms-excel',
    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  }
  ar_ext = ar_ext ? ar_ext.split(',') : []
  for (i = 0, length = ar_ext.length; i < length; i++) {
    let ext = ar_ext[i]
    if (mime.hasOwnProperty(ext)) {
      accept.push(mime[ext])
    }
  }
  return accept
}

function addUrlParam (url, ar_param) {
  let str_param = $.param(ar_param)
  if (/\?/.test(url)) {
    url += '&' + str_param
  } else {
    url += '?' + str_param
  }
  return url
}

/**
 * eg.
 *
 * cookie('author', 'seven') set cookie
 * cookie('author') get cookie
 * cookie('author', null) delete cookie
 *
 **/
function cookie (name, value, hours, domain, path) {
  let date
  let arr
  let reg
  let host = location.host

  if (undefined === value) {
    // get cookie
    value = null
    reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)')

    arr = document.cookie.match(reg)
    if (arr) {
      value = decodeURIComponent(arr[2])
    }

    return value
  } else if (value === null) {
    // delete cookie
    cookie(name, '', -1)
  } else {
    // set cookie
    date = new Date()
    date.setTime(date.getTime() + (hours || 24) * 3600000)

    // 默认设置到顶级域名
    domain = undefined === domain ? host ? '.' + host : null : domain

    if (domain == null) {
      // domain 为 null 时 不支持
      // log('cookie() domain is required');
    } else {
      domain = ';domain=' + domain
      path = undefined === path ? ';path=/' : ';path=' + path

      document.cookie = name + '=' + encodeURIComponent(value) + ';expires=' + date.toGMTString() + domain + path
    }
  }
}

/**
 * 创建比较器, 从小到大
 * @param property_name 比较的属性名
 * @returns {Function}
 */
function compare (property_name) {
  return function (object1, object2) {
    let value1 = object1[property_name]
    let value2 = object2[property_name]
    if (value2 < value1) {
      return 1
    } else if (value2 > value1) {
      return -1
    } else {
      return 0
    }
  }
}

/**
 * 序列化简单对象参数，按key来从小到大排序
 * @param params
 * @returns {string}
 */
function serializeObject (params) {
  let tmp_arr = []
  let i
  let length
  let result = ''
  for (i in params) {
    if (params.hasOwnProperty(i)) {
      tmp_arr.push({
        key: i,
        value: params[i]
      })
    }
  }
  tmp_arr.sort(compare('key'))
  for (i = 0, length = tmp_arr.length; i < length; i++) {
    if (i > 0) {
      result += '&'
    }
    if (typeof tmp_arr[i]['value'] === 'object') {
      tmp_arr[i]['value'] = JSON.stringify(tmp_arr[i]['value'])
    }

    result += tmp_arr[i]['key'] + '=' + tmp_arr[i]['value']
  }
  return result
}

function parseUrl (url) {
  let ret = document.createElement('a')
  ret.href = url
  ret.params = getUrlParams(ret.search)
  return ret
}

function reflow () {
  void(document.body.offsetWidth) //eslint-disable-line
}

function stringPadLeft (str, padChar, width) {
  while (str.length < width) {
    if (str.length + padChar.length < width) {
      str = padChar + str
    } else {
      str = padChar.substring(0, width - str.length) + str
    }
  }
  return str
}

function stringPadRight (str, padChar, width) {
  while (str.length < width) {
    if (str.length + padChar.length < width) {
      str += padChar
    } else {
      str += padChar.substring(0, width - str.length)
    }
  }
  return str
}

/**
 * 图片压缩组件
 * @param file
 * @param options
 * @param callback
 * @returns {string}
 */

function compressImage (file, options, callback) {
  let maxWidth = options.maxWidth
  let maxHeight = options.maxHeight
  let quality = options.quality || 1

  let fileReader = new FileReader()
  fileReader.onload = function () {
    render(fileReader.result)
  }
  fileReader.readAsDataURL(file)

  let render = function (src) {
    let img = new Image()
    img.onload = function () {
      let resize_obj = resizeImage(img.width, img.height, maxWidth, maxHeight)
      let width = resize_obj.width
      let height = resize_obj.height
      let canvas = document.createElement('canvas')
      let ctx = canvas.getContext('2d')
      let blob
      canvas.setAttribute('width', width)
      canvas.setAttribute('height', height)
      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height)
      blob = dataURLtoBlob(canvas.toDataURL(file.type, quality))
      blob.name = file.name
      callback(blob)
    }
    img.src = src
  }
}

/**
 * ios设备不支持图片宽高超过2048，无法渲染
 * @param file
 * @param direction
 * @param callback
 */
function rotateImage (file, direction, callback) {
  let dpr = Math.max(window.devicePixelRatio || 1, 1)
  let fileReader = new FileReader()
  fileReader.onloadend = function (e) {
    render(fileReader.result)
  }
  fileReader.readAsDataURL(file)

  let render = function (src) {
    let img = new Image()
    img.onload = function () {
      let width = img.width
      let height = img.height
      let canvas_width = width / dpr
      let canvas_height = height / dpr
      let final_canvas_width = canvas_width
      let final_canvas_height = canvas_height
      switch (direction) {
        case 'left':
          [final_canvas_width, final_canvas_height] = [final_canvas_height, final_canvas_width]
          break
        case 'right':
          [final_canvas_width, final_canvas_height] = [final_canvas_height, final_canvas_width]
          break
        default:
          break
      }
      let canvas = createCanvas(final_canvas_width, final_canvas_height)
      let ctx = canvas.getContext('2d')
      let blob
      switch (direction) {
        case 'left':
          ctx.rotate(1.5 * Math.PI)
          ctx.translate(-canvas_width, 0)
          break
        case 'right':
          ctx.rotate(0.5 * Math.PI)
          ctx.translate(0, -canvas_height)
          break
        case 'bottom':
          ctx.translate(canvas_width, canvas_height)
          ctx.rotate(Math.PI)
          break
        default:
          break
      }
      ctx.drawImage(img, 0, 0, width, height, 0, 0, canvas_width, canvas_height)
      blob = dataURLtoBlob(canvas.toDataURL(file.type))
      blob.name = file.name
      callback(blob)
    }
    img.src = src
  }
}

let loaded_res = {}

function loadResource (arr_res, success_callback, error_callback) {
  if (!$.isArray(arr_res)) {
    arr_res = [arr_res]
  }
  function finish () {
    if (arr_success.length + arr_error.length < arr_res.length) {
      return
    }
    if (arr_error.length) {
      error_callback && error_callback(arr_error)
      return
    }
    success_callback && success_callback()
  }
  let arr_success = []
  let arr_error = []
  for (let i = 0, length = arr_res.length; i < length; i++) {
    (function (url) {
      let o_url = parseUrl(url)
      let dom
      if (loaded_res[o_url.href]) {
        arr_success.push(url)
        finish()
        return
      }
      if (/\.js$/.test(url)) {
        dom = document.createElement('script')
        dom.src = url
      } else if (/\.css$/.test(url)) {
        dom = document.createElement('link')
        dom.setAttribute('rel', 'stylesheet')
        dom.href = url
      } else {
        arr_error.push(url)
        finish()
        return
      }
      dom.addEventListener('load', function () {
        loaded_res[o_url.href] = 1
        arr_success.push(url)
        finish()
      })
      dom.addEventListener('error', function () {
        arr_error.push(url)
        finish()
      })
      document.head.appendChild(dom)
    })(arr_res[i])
  }
}

function obj2Style (obj) {
  let style = ''
  for (let i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (['transition', 'animation', 'transform'].indexOf(i) !== -1 && config.isWebkit) {
        style += '-webkit-' + i + ':' + obj[i] + ';'
      }
      style += i + ':' + obj[i] + ';'
    }
  }
  return style
}

let keyCode = {
  BackSpace: 8,
  Tab: 9,
  Clear: 12,
  Enter: 13,
  Shift: 16,
  Control: 17,
  Alt: 18,
  CapeLock: 20,
  Esc: 27,
  SpaceBar: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  LeftArrow: 37,
  UpArrow: 38,
  RightArrow: 39,
  DownArrow: 40,
  Insert: 45,
  Delete: 46,
  NumLock: 144
}

let utils = {
  log: log,
  inherits: inherits,
  getUrlParams: getUrlParams,
  getUrlParam: getUrlParam,
  setTitle: setTitle,
  getTagParams: getTagParams,
  loadImage: loadImage,
  resizeImageFull: resizeImageFull,
  resizeImage: resizeImage,
  getFileExt: getFileExt,
  addUrlParam: addUrlParam,
  cookie: cookie,
  createCanvas: createCanvas,
  dataURLtoBlob: dataURLtoBlob,
  blobToDataURL: blobToDataURL,
  serializeObject: serializeObject,
  parseUrl: parseUrl,
  reflow: reflow,
  stringPadLeft: stringPadLeft,
  stringPadRight: stringPadRight,
  compressImage: compressImage,
  keyCode: keyCode,
  loadResource: loadResource,
  obj2Style: obj2Style,
  rotateImage: rotateImage
}

export default utils
