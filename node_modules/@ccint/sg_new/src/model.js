import $ from 'jquery'
import utils from './utils.js'
import config from './config.js'
import Cache from './cache.js'

let models = {}
let error_before_callback
let error_after_callback
let success_before_callback
let success_after_callback
let before_ajax_callback
let csrf_key = ''
let use_param = true

/**
 * 获取model，如果没有则创建
 * @param url model对应的url
 * @param needCache
 * @param need_abort
 * @param type true表示post请求
 * @returns {*}
 */
function get (url, needCache, type, need_abort) {
  if (!models[url]) {
    let model = {
      url: url,
      needCache: true,
      need_abort: true,
      jsonp: false,
      type: type ? 'POST' : 'GET',
      data: new Cache(),
      getData: getData,
      deleteCache: deleteCache
    }
    let a = utils.parseUrl(url)
    if (a.host && a.host !== location.host) {
      model['jsonp'] = true
    }
    models[url] = model
  }
  models[url].needCache = needCache !== false
  models[url].need_abort = !!need_abort
  return models[url]
}

/**
 * 获取数据，通过need_cache来设置是否需要缓存
 * @param params 请求的参数 object
 * @param callback 数据回调 function
 * @param callback2 错误回调
 * @returns {*}
 */
function getData (params, callback, callback2) {
  if ($.type(params) === 'function') {
    callback2 = callback
    callback = params
    params = {}
  } else {
    params = params || {}
  }
  let self = this, cache_key = utils.serializeObject(params), data = self.data.get(cache_key)
  if (self.needCache && data) {
    let need_success_callback = true
    if (success_before_callback) {
      need_success_callback = success_before_callback.call(window, $.extend(true, {}, data))
    }
    if (callback && need_success_callback !== false) {
      need_success_callback = callback.call(window, $.extend(true, {}, data))
    }
    if (success_after_callback && need_success_callback !== false) {
      success_after_callback.call(window, $.extend(true, {}, data))
    }
  } else {
    if (self.need_abort && self.current_ajax) {
      // if last request exists, then abort it
      self.current_ajax.sg_abort = 1
      self.current_ajax.abort()
    }
    if (before_ajax_callback && before_ajax_callback.call(window, self, params) === false) {
      return
    }
    let headers = {}
    if (csrf_key) {
      let csrf_value = utils.cookie(csrf_key) || ''
      if (use_param) {
        params[csrf_key] = csrf_value
      } else {
        headers[csrf_key] = csrf_value
      }
    }

    self.current_ajax = $.ajax({
      url: self.url,
      headers: headers,
      type: self.type,
      data: params,
      dataType: self.jsonp ? 'jsonp' : 'json',
      timeout: config.timeOut,
      success: function (data, status, xhr) {
        if (xhr.sg_abort) {
          return false// if the xhr is aborted
        }
        if (self.needCache) {
          self.data.set(cache_key, data)
        }
        let need_success_callback = true
        if (success_before_callback) {
          need_success_callback = success_before_callback.call(window, $.extend(true, {}, data))
        }
        if (callback && need_success_callback !== false) {
          need_success_callback = callback.call(window, $.extend(true, {}, data))
        }
        if (success_after_callback && need_success_callback !== false) {
          success_after_callback.call(window, $.extend(true, {}, data))
        }
      },
      error: function (xhr, error_type, error) {
        if (xhr.sg_abort) {
          return false// if the xhr is aborted
        }
        if (xhr.status === 0 || !navigator.onLine) {
          error_type = 'offline'
        }
        config.debug && alert(self.url + cache_key)
        let need_error_callback = true
        if (error_before_callback) {
          need_error_callback = error_before_callback.call(window, xhr, error_type, error)
        }
        if (callback2 && need_error_callback !== false) {
          need_error_callback = callback2.call(window, xhr, error_type, error)
        }
        if (error_after_callback && need_error_callback !== false) {
          error_after_callback.call(window, xhr, error_type, error)
        }
      }
    })
  }
  return self.current_ajax
}

function deleteCache (params) {
  let self = this
  if (!params) {
    self.data.reset()
  } else {
    self.data.del(utils.serializeObject(params))
  }
}

/** 如果before_callback 返回false, callback2、after_callback都不执行
 * 如果callback2 返回false, after_callback不执行
 * @param before_callback 错误回调前调用的公共回调
 * @param after_callback 错误回调后调用的公共回调
 */
function setErrorCallback (before_callback, after_callback) {
  error_before_callback = before_callback
  error_after_callback = after_callback
}

/** 如果before_callback 返回false, callback、after_callback都不执行
 * 如果callback 返回false, after_callback不执行
 * @param before_callback 成功回调前调用的公共回调
 * @param after_callback 成功回调后调用的公共回调
 */
function setSuccessCallback (before_callback, after_callback) {
  success_before_callback = before_callback
  success_after_callback = after_callback
}

function setBeforeAjaxCallback (callback) {
  before_ajax_callback = callback
}

function setCsrfKey (key, useParam) {
  use_param = useParam !== false
  csrf_key = key
}

let Model = {
  get: get,
  setErrorCallback: setErrorCallback,
  setSuccessCallback: setSuccessCallback,
  setBeforeAjaxCallback: setBeforeAjaxCallback,
  setCsrfKey: setCsrfKey
}

export default Model
