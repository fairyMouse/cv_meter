import $ from 'jquery'
import config from './config.js'
import utils from './utils.js'
import Event from './event.js'
import View from './view.js'
import Model from './model.js'
import Cache from './cache.js'
import Component from './component.js'
import Action from './action.js'
import './loading.js'
import './animate.js'
import 'animate.css'
import './main.css'
import './loading.css'

let sg = {
  isReady: false,
  config: config,
  utils: utils,
  Event: Event,
  View: View,
  Model: Model,
  Cache: Cache,
  Component: Component,
  Action: Action
}

let callback_list = []

/**
 * ie8添加indexOf方法
 */
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function (elt) {
    let len = this.length >>> 0
    let from = Number(arguments[1]) || 0
    from = (from < 0)
      ? Math.ceil(from)
      : Math.floor(from)
    if (from < 0) { from += len }
    for (; from < len; from++) {
      if (from in this &&
        this[from] === elt) { return from }
    }
    return -1
  }
}

function init (cfg) {
  // 只能初始化一次
  if (sg.isReady) {
    return
  }

  // 将配置项更新
  cfg && $.extend(sg.config, cfg)

  // sg组件初始化，框架组件都带init的方法
  let i, length
  for (i in sg) {
    if (sg.hasOwnProperty(i)) {
      initComponent(sg[i])
    }
  }

  // ready后处理所有回调函数
  for (i = 0, length = callback_list.length; i < length; i++) {
    callback_list[i]()
  }

  sg.isReady = true
}

/**
 * 初始化基础组件
 * cp.deps 组件依赖项
 * cp.isReady 组件初始化标志
 * cp.init 组件初始化方法
 * @param cp 组件对象
 */
function initComponent (cp) {
  if (!cp || !cp.init || cp.isReady) {
    return
  }
  if (cp.deps) {
    for (let i = 0, length = cp.deps.length; i < length; i++) {
      initComponent(sg[cp.deps[i]])
    }
  }
  cp.init(sg)
  cp.isReady = true
}

/**
 * 如果框架ready则执行callback
 * @param callback
 */
function ready (callback) {
  if (sg.isReady) {
    callback()
  } else {
    callback_list.push(callback)
  }
}

sg.init = init
sg.ready = ready
export default sg
