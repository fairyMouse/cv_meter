import $ from 'jquery'
import sg from '../sg.js'
import './rollview.css'
import 'jquery-mousewheel'

sg.Component.define('RollView', {
  template: '<div class="sg_roll_view" style="height:{{radius*2}}px">\
  <div class="sg_roll_view_inner" style="-webkit-transform: rotateX({{deg*curIndex}}deg);transform: rotateX({{deg*curIndex}}deg);">\
  {{each list item key}}\
  <div class="sg_roll_item" data-value="{{item.value}}" data-index="{{key}}" style="-webkit-transform: rotateX({{-deg*key}}deg) translateZ({{radius}}px);transform: rotateX({{-deg*key}}deg) translateZ({{radius}}px);">{{if item.text != undefined}}{{item.text}}{{/if}}{{if item.html != undefined}}{{@item.html}}{{/if}}</div> \
  {{/each}}\
  </div> \
  <div class="sg_roll_view_focus"></div> \
  </div>',
  properties: {
    curIndex: 0, // 当前选中的index
    deg: 20, // 转动项的角度间隔
    radius: 90, // 转动半径
    list: [{ // 转动数组，至少包含value和text，也支持html
      value: 1,
      text: 1
    }, {
      value: 2,
      text: 2
    }, {
      value: 3,
      text: 3
    }, {
      value: 4,
      text: 4
    }],
    onChange: null, // 选中值变化时回调
    _curIndex: 0,
    _curDeg: 0,
    _maxShowAbs: 3,
    _startY: -1,
    _startDeg: 0,
    _wheelTimer: 0
  },
  onBeforeRender: function (next) {
    let self = this
    self._curDeg = self.curIndex * self.deg
    self._maxShowAbs = Math.floor(90 / self.deg) - 1
    if (self.curIndex < 0) {
      self.curIndex = 0
    }
    if (self.curIndex > self.list.length - 1) {
      self.curIndex = self.list.length - 1
    }
    self._curIndex = self.curIndex
    self._curDeg = self.curIndex * self.deg
    next({
      deg: self.deg,
      radius: self.radius,
      curIndex: self.curIndex,
      list: self.list
    })
  },
  onRender: function () {
    let self = this
    let $dom = self.$parent
    let $sg_roll_view_inner = $dom.find('.sg_roll_view_inner')

    $dom.on('mousedown', function (e) {
      self._startY = e.pageY === undefined ? e.originalEvent.targetTouches[0].pageY : e.pageY
      self._startDeg = parseInt($sg_roll_view_inner.css({transition: '0ms'}).attr('style').replace(/.*rotateX\((.*)deg\).*/, '$1'))
    }).on('mousemove', function (e) {
      if (self._startY < 0) {
        return
      }
      let curY = e.pageY === undefined ? e.originalEvent.targetTouches[0].pageY : e.pageY
      self._curDeg = self._startDeg - (curY - self._startY) / 2
      self.curIndex = parseInt((self._curDeg / self.deg).toFixed())
      e.preventDefault()
      self.refreshClass()
    }).on('mouseup touchend', function () {
      self.curIndex = parseInt((self._curDeg / self.deg).toFixed())
      if (self.curIndex !== self._curIndex) {
        self.onChange && self.onChange(self.getValue())
        self._curIndex = self.curIndex
      }
      self._curDeg = self.curIndex * self.deg
      self._startY = -1
      self.refreshClass()
    }).on('touchstart', function (e) {
      self._startY = e.originalEvent.targetTouches[0].pageY
      self._startDeg = parseInt($sg_roll_view_inner.css({transition: '0ms'}).attr('style').replace(/.*rotateX\((.*)deg\).*/, '$1'))
    }).on('touchmove', function (e) {
      let curY = e.originalEvent.targetTouches[0].pageY
      self._curDeg = self._startDeg - (curY - self._startY) / 2
      self.curIndex = parseInt((self._curDeg / self.deg).toFixed())
      e.preventDefault()
      self.refreshClass()
    }).on('mousewheel', function (e) {
      if (e.deltaY < 0) {
        self.curIndex--
      } else {
        self.curIndex++
      }
      self._curIndex = self.curIndex
      self._curDeg = self.curIndex * self.deg
      $sg_roll_view_inner.css({transition: '0ms'})
      self._startY = -2
      self.refreshClass()
      clearTimeout(self._wheelTimer)
      self._wheelTimer = setTimeout(function () {
        self.onChange && self.onChange(self.getValue())
      }, 300)
    })
    this.refreshClass()
  },
  refreshClass: function () {
    let self = this
    let $dom = self.$dom
    let $sg_roll_view_inner = $dom.find('.sg_roll_view_inner')
    let $sg_roll_item = $dom.find('.sg_roll_item')

    if (self.curIndex < 0) {
      self.curIndex = 0
      self._curDeg = 0
      return
    }

    if (self.curIndex > self.list.length - 1) {
      self.curIndex = self.list.length - 1
      self._curDeg = self.curIndex * self.deg
      return
    }

    $sg_roll_item.each(function (i, v) {
      let delta = Math.abs(i - self.curIndex)
      if (delta <= self._maxShowAbs) {
        $(v).removeClass().addClass('sg_roll_item show_val sg_rollview_index_' + delta)
        if (self.curIndex === i) {
          $(v).addClass('current_line')
        } else {
          $(v).removeClass('current_line')
        }
      } else {
        $(v).removeClass().addClass('sg_roll_item')
      }
    })

    if (self._startY === -1) {
      $sg_roll_view_inner.css(self._setTransform('rotateX(' + self._curDeg + 'deg)', '300ms ease-in-out'))
    } else {
      $sg_roll_view_inner.css(self._setTransform('rotateX(' + self._curDeg + 'deg)'))
    }
  },
  _setTransform: function (transform, transition) {
    return {
      '-webkit-transform': transform,
      transform: transform,
      '-webkit-transition': transition,
      transition: transition
    }
  },
  getValue: function () {
    let self = this
    return self.list[self.curIndex]
  }
})
