import $ from 'jquery'
import sg from '../sg.js'

let instance
let mode
let filter_list = {}

function change_callback () {
  if (instance.update() === false) {
    return
  }
  if (sg.config.fixDirection && (!instance.current || !instance.current.tm)) {
    instance.fixTm()
    return
  }
  sg.fire('routeChange')
  let parent = sg.config.parent
  let current = instance.current
  let last = instance.last

  // 有上一个页面
  if (last) {
    // vm自己处理路由
    if (current.pathName === last.pathName && last.vm && last.vm.onRouteChange) {
      current.vm = last.vm
      current.$dom = last.$dom
      current.loaded = last.loaded = 1
      last.vm.onRouteChange(last, current)
      return
    }
    // 存储滚动条位置
    last.scrollTop = $(window).scrollTop()
    sg.utils.log('window : ' + last.scrollTop, 'ScrollSave')
    last.$dom.find('.sg_scroll_x').each(function () {
      let tmp = $(this)
      let tmpScrollLeft = tmp.scrollLeft()
      tmp.data('scrollLeft', tmpScrollLeft)
      sg.utils.log('sg_scroll_x : ' + tmpScrollLeft, 'ScrollSave')
    })
    last.$dom.find('.sg_scroll_y').each(function () {
      let tmp = $(this)
      let tmpScrollTop = tmp.scrollTop()
      tmp.data('scrollTop', tmpScrollTop)
      sg.utils.log('sg_scroll_y : ' + tmpScrollTop, 'ScrollSave')
    })
    filterCallback()
  } else {
    exeFilter(current.filters, current.pathName, current.params, true, filterCallback)
  }
  function renderCallback () {
    sg.fire('loadingStop', {
      $dom: current.$dom
    })
    let tmpScrollTop = instance.current.scrollTop || sg.config.defaultScrollTop
    $(window).scrollTop(tmpScrollTop)
    sg.utils.log('window : ' + tmpScrollTop, 'ScrollRestore')
    current.loaded = 1
  }
  function switchPage () {
    let tmpScrollTop
    let tmpScrollLeft
    sg.utils.setTitle(current.title)
    current.$dom.appendTo(parent).show().siblings('.sg_layout').detach()
    if (last) {
      if (last.vm) {
        sg.utils.log(last.vm.constructor.name, 'ViewLeave')
        last.vm.onLeave && last.vm.onLeave()
        if (last.vm.needCache === false) {
          last.vm.destroy()
          last.vm = null
          last.loaded = 0
        }
      }

      // 恢复滚动条位置
      tmpScrollTop = current.scrollTop || sg.config.defaultScrollTop
      $(window).scrollTop(tmpScrollTop)
      sg.utils.log('window : ' + tmpScrollTop, 'ScrollRestore')

      if (current.vm.needCache !== false && current.loaded) {
        // 恢复局部滚动条位置
        if (current.$dom.hasClass('.sg_scroll_x')) {
          tmpScrollLeft = current.$dom.data('scrollLeft') || 0
          current.$dom.scrollLeft(tmpScrollLeft)
          sg.utils.log('sg_layout : ' + tmpScrollLeft, 'ScrollRestore')
        } else if (current.$dom.hasClass('.sg_scroll_y')) {
          tmpScrollTop = current.$dom.data('scrollTop') || 0
          current.$dom.scrollTop(tmpScrollTop)
          sg.utils.log('sg_layout : ' + tmpScrollTop, 'ScrollRestore')
        }
        current.$dom.find('.sg_scroll_x').each(function () {
          let tmp = $(this)
          let tmpScrollLeft = tmp.data('scrollLeft') || 0
          tmp.scrollLeft(tmpScrollLeft)
          sg.utils.log('sg_scroll_x : ' + tmpScrollLeft, 'ScrollRestore')
        })
        current.$dom.find('.sg_scroll_y').each(function () {
          let tmp = $(this)
          let tmpScrollTop = tmp.data('scrollTop') || 0
          tmp.scrollTop(tmpScrollTop)
          sg.utils.log('sg_scroll_y : ' + tmpScrollTop, 'ScrollRestore')
        })
        sg.utils.log(current.vm.constructor.name, 'ViewRestart')
        current.vm.onRestart && current.vm.onRestart()
        return
      }
      sg.utils.log('end', 'ViewSwitch')
    }
    sg.fire('loadingStart', {
      $dom: current.$dom
    })
    current.vm.render(current.$dom, current.params, renderCallback)
  }
  function filterCallback () {
    if (current.vm) {
      switchPage()
    } else {
      sg.fire('loadingStart', {
        $dom: parent
      })
      sg.View.require(current.vmName, function (vm) {
        if (instance.current.url !== current.url) {
          return
        }
        sg.fire('loadingStop', {
          $dom: parent
        })
        current.vm = vm
        switchPage()
      })
    }
  }
}

function exeFilter (filters, url, params, deleteHistory, next) {
  if (!filters) {
    next && next.call(window)
    return true
  }
  let length = filters.length

  function exeFilterSingle (i) {
    if (i === length) {
      next && next.call(window)
      return
    }
    if (filter_list[filters[i]]) {
      filter_list[filters[i]].call(window, url, params, deleteHistory, function () {
        exeFilterSingle(i + 1)
      })
    } else {
      exeFilterSingle(i + 1)
    }
  }

  exeFilterSingle(0)
}

function init () {
  sg.router = getInstance()
}

function getInstance () {
  if (!instance) {
    mode = sg.config.html4Mode ? 'hash' : history.pushState ? 'history' : 'hash'
    if (mode === 'history') {
      instance = new HistoryRouter()
    } else {
      instance = new HashRouter()
    }
    let cur_path = instance.getPathName()
    let arr_path = cur_path.split('/')
    if (arr_path.length > 1) {
      let parse_routes = {}
      // init config.routes
      for (let i in sg.config.routes) {
        parse_routes[i] = sg.config.routes[i]
        if (!i) {
          arr_path[arr_path.length - 1] = ''
          parse_routes[arr_path.join('/')] = sg.config.routes[i]
          arr_path[arr_path.length - 1] = 'index.html'
          parse_routes[arr_path.join('/')] = sg.config.routes[i]
          arr_path[arr_path.length - 1] = 'index.php'
          parse_routes[arr_path.join('/')] = sg.config.routes[i]
        } else if (i[0] !== '/') {
          arr_path[arr_path.length - 1] = i
          parse_routes[arr_path.join('/')] = sg.config.routes[i]
        }
      }
      sg.config.routes = parse_routes
    }
  }
  return instance
}

function Router () {
  this.history = new sg.Cache(20)
  this.last = null
  this.current = null
}

Router.prototype = {
  start: function () {
    // 去除浏览器自带的滚动条记录
    if (history.scrollRestoration) {
      history.scrollRestoration = 'manual'
    }
    sg.Component.on('ComponentCreate', function (data) {
      if (!sg.router.current) {
        return
      }
      if (data.instance.id) {
        return
      }
      sg.router.current.componentInstances.push(data.instance)
    })
    this._start()
  },
  update: function () {
    let ret = this.getParams()
    let tm = ret['tm'] || 0
    delete ret['tm']
    if (sg.config.fixDirection && !tm) {
      return
    }
    let url = location.href

    // 同样url不做跳转
    if (this.current && this.current.url === url) {
      return false
    }

    let cache_history = this.history.get(url)
    if (cache_history) {
      this.last = this.current
      this.current = cache_history
      return
    }
    this.last = this.current
    let tmp_dom = $('<div class="sg_layout"></div>')
    this.current = {
      tm: tm,
      params: ret,
      url: url,
      queryString: this.getQueryString(),
      requestUri: this.getRequestUri(),
      pathName: this.getPathName(),
      $dom: tmp_dom,
      componentInstances: []
    }
    let vm_name = sg.config.routes[this.current.pathName]
    let resource = sg.config.resource[vm_name]
    let title = (resource && resource.title) || sg.config.title
    let filters = (resource && resource.filters) || sg.config.filters
    let animation = resource && resource.animation
    this.current.vmName = vm_name
    this.current.title = title
    this.current.filters = filters
    this.current.animation = animation
    this.history.set(url, this.current)
  },
  getParams: function () {
    let query = this.getQueryString()
    let arr = query.split('&')
    let ret = {}
    for (let i = 0, length = arr.length; i < length; i++) {
      let arr2 = arr[i].split('=')
      if (arr2[0]) {
        ret[arr2[0]] = decodeURIComponent(arr2[1])
      }
    }
    return ret
  },
  getParam: function (key) {
    let params = this.getParams()
    return params[key] || ''
  },
  getMode: function () {
    return mode
  },
  getCleanUrl: function () {
    return this.removeParam('tm')
  },
  getCurrentHistory: function () {
    return this.current
  },
  getLastHistory: function () {
    return this.last
  }
}

function HistoryRouter () {
  Router.call(this)
}

HistoryRouter.prototype = {
  _start: function () {
    $(window).bind('popstate', change_callback)
    setTimeout(function () {
      change_callback()
    }, 0)
  },
  getQueryString: function () {
    return location.search.replace('?', '')
  },
  getRequestUri: function () {
    return location.pathname + location.search
  },
  getPathName: function () {
    return location.pathname
  },
  removeParam: function (param_name) {
    let str_preg = new RegExp('&?' + param_name + '=[^&]*')
    let url = location.href.replace(str_preg, '')
    url = sg.utils.trim(url.replace('?&', '?'), '?')
    return url
  },
  redirect: function (url, params, deleteHistory) {
    let path_name = url.replace(/\?.*/ig, '')
    let vm_name = sg.config.routes[path_name]
    let resource = sg.config.resource[vm_name]
    let filters = resource && resource.filters
    let tmp_params = sg.utils.getUrlParams(url)
    params = params || {}
    $.extend(tmp_params, params)
    exeFilter(filters, path_name, tmp_params, deleteHistory, function () {
      if (sg.config.fixDirection) {
        tmp_params['tm'] = +new Date()
      }
      let query = $.param(tmp_params)
      // 把加号转成空格
      query && (query = query.replace(/\+/ig, '%20'))
      query && (url = path_name + '?' + query)
      if (deleteHistory) {
        history.replaceState(null, '', url)
      } else {
        history.pushState(null, '', url)
      }
      change_callback()
    })
  },
  fixTm: function () {
    let url = location.href
    if (/\?/.test(url)) {
      url += '&tm=' + new Date().getTime()
    } else {
      url += '?tm=' + new Date().getTime()
    }
    history.replaceState(null, '', url)
    change_callback()
  }
}

function HashRouter () {
  Router.call(this)
}

HashRouter.prototype = {
  _start: function () {
    $(window).bind('hashchange', change_callback)
    setTimeout(function () {
      change_callback()
    }, 0)
  },
  getQueryString: function () {
    return location.hash.replace(/#[^?]*\??/, '')
  },
  getRequestUri: function () {
    return location.hash.replace(/#!?/, '')
  },
  getPathName: function () {
    return this.getRequestUri().replace(/\?.*/, '')
  },
  removeParam: function (param_name) {
    let str_preg = new RegExp('&?' + param_name + '=[^&]*')
    let hash = location.hash.replace(str_preg, '')
    hash = sg.utils.trim(hash.replace('?&', '?'), '?')
    return location.protocol + '//' + location.host + location.pathname + location.search + hash
  },
  redirect: function (url, params, deleteHistory) {
    let path_name = url.replace(/\?.*/ig, '')
    let vm_name = sg.config.routes[path_name]
    let resource = sg.config.resource[vm_name]
    let filters = resource && resource.filters
    let tmp_params = sg.utils.getUrlParams(url)
    params = params || {}
    $.extend(tmp_params, params)
    exeFilter(filters, path_name, tmp_params, deleteHistory, function () {
      if (sg.config.fixDirection) {
        tmp_params['tm'] = +new Date()
      }
      let query = $.param(tmp_params)
      query && (query = query.replace(/\+/ig, '%20'))
      query && (url = path_name + '?' + query)
      url && (url = '#!' + url)
      if (deleteHistory) {
        location.replace(url)
      } else {
        location.href = url
      }
    })
  },
  fixTm: function () {
    let url = location.hash
    if (url) {
      if (/\?/.test(url)) {
        url += '&tm=' + new Date().getTime()
      } else {
        url += '?tm=' + new Date().getTime()
      }
    } else {
      url = '#!?tm=' + new Date().getTime()
    }
    location.replace(url)
  }
}

sg.utils.inherits(HistoryRouter, Router)
sg.utils.inherits(HashRouter, Router)

function addFilter (name, callback) {
  if ($.type(name) === 'string') {
    filter_list[name] = callback
  } else if ($.type(name) === 'object') {
    $.extend(filter_list, name)
  }
}

sg.Action.set({
  'sg-redirect': {
    init: function ($dom) {
      $dom.on('click', function () {
        let url = $dom.attr('sg-redirect')
        let stop_propagation = $dom.attr('sg-stop-propagation')
        if (url === '-1') {
          history.go(-1)
        } else if (/^https?:\/\//ig.test(url)) {
          location.href = url
        } else {
          sg.router.redirect(url)
        }
        if (stop_propagation === 1) {
          return false
        }
      })
    }
  }
})

sg.Router = {
  HistoryRouter: HistoryRouter,
  HashRouter: HashRouter,
  init: init,
  addFilter: addFilter,
  deps: ['View', 'Event']
}
