import $ from 'jquery'
import sg from '../sg.js'
import './autocomplete.css'

sg.Component.define('AutoComplete', {
  properties: {
    list: [], // 可以是数组，如[{text:'111'}]，每一个对象至少包含text，同时可以包含html做显示，也可以是回掉函数 function (searchKey, next) {next(list)}
    onSelect: null, // 选中后的回调
    historyKey: '' // 配置历史记录的key，最多记录10个
  },
  template: '<div class="sg_autocomplete">' +
  '<div class="sg_autocomplete_list"></div>' +
  '{{if isShowHistory}}<a class="btn_clear_history hide_ele">清空历史</a>{{/if}}' +
  '</div>',
  onBeforeRender: function (next) {
    let self = this
    self.isShowHistory = !!self.historyKey.length
    next({
      isShowHistory: self.isShowHistory
    }, 2)
  },
  onRender: function () {
    let self = this
    let $parent = self.$parent
    let $dom = self.$dom

    $parent.on('input', self.events.input)
      .on('focus', self.events.focus)
      .on('blur', self.events.blur)

    $dom.find('.sg_autocomplete_list').on('click', '.sg_autocomplete_li', function () {
      let $cur = $(this)
      let text = $cur.data('text').toString()
      let selectItem
      for (let i = 0, length = self._list.length; i < length; i++) {
        if (self._list[i].text.toString() === text) {
          selectItem = self._list[i]
          $parent.val(text)
          self.onSelect && self.onSelect(self._list[i])
          break
        }
      }
      self.hide()
      if (self.historyKey) {
        let historyList = localStorage.getItem(self.historyKey)
        if (historyList) {
          historyList = JSON.parse(historyList)
        } else {
          historyList = []
        }
        for (let i = 0, length = historyList.length; i < length; i++) {
          if (historyList[i].text.toString() === text) {
            historyList.splice(i, 1)
            break
          }
        }
        historyList.unshift(selectItem)
        historyList = historyList.slice(0, 10)
        localStorage.setItem(self.historyKey, JSON.stringify(historyList))
      }
    })

    $dom.find('.btn_clear_history').on('click', function () {
      localStorage.removeItem(self.historyKey)
      self._showHistory()
    })
  },
  events: {
    input: function () {
      this._showList()
    },
    focus: function () {
      this._showList()
    },
    blur: function () {
      let self = this
      setTimeout(function () {
        self.hide()
      }, 200)
    }
  },
  _showList: function () {
    let self = this
    let $dom = self.$dom
    let searchKey = self.$parent.val()
    if (!searchKey.length) {
      if (self.isShowHistory) {
        self._showHistory()
      } else {
        self.hide()
      }
      return
    }
    $dom.find('.btn_clear_history').addClass('hide_ele')
    if ($.isFunction(self.list)) {
      self.list(searchKey, function (list) {
        self._renderList(list)
      })
    } else {
      let searchList = []
      for (let i = 0, length = self.list.length; i < length; i++) {
        if (self.list[i].text.indexOf(searchKey) > -1) {
          searchList.push(self.list[i])
        }
      }
      self._renderList(searchList)
    }
  },
  _renderList: function (searchList) {
    let self = this
    let $dom = self.$dom
    if (!searchList || !searchList.length) {
      self.hide()
      return
    }
    self._list = searchList
    self.show()
    sg.View.require('_AutoComplete').render($dom.find('.sg_autocomplete_list'), {
      list: searchList
    })
  },
  _showHistory: function () {
    let self = this
    let $dom = self.$dom
    let historyList = localStorage.getItem(self.historyKey)
    if (!historyList) {
      self.hide()
      return
    }

    historyList = JSON.parse(historyList)

    if (!historyList.length) {
      self.hide()
      return
    }
    self._renderList(historyList)
    $dom.find('.btn_clear_history').removeClass('hide_ele')
  },
  hide: function () {
    let self = this
    setTimeout(function () {
      self.$dom.find('.sg_autocomplete_list').text('')
      self.$dom.hide()
    })
  },
  show: function () {
    let self = this
    let $parent = self.$parent
    let $dom = self.$dom
    let offset = $parent.position()
    let marginLeft = parseInt($parent.css('margin-left')) || 0
    let marginTop = parseInt($parent.css('margin-top')) || 0
    let width = $parent.outerWidth()
    let height = $parent.outerHeight()
    let top = offset.top
    let left = offset.left
    $dom.css({
      top: top + height + marginTop,
      left: left + marginLeft,
      width: width
    }).show()
  },
  onDestroy: function () {
    let self = this
    self.$parent.off('input', self.events.input)
      .off('focus', self.events.focus)
      .off('blur', self.events.blur)
  }
})

sg.View.define('_AutoComplete', {
  template: '{{each list item index}} <div class="sg_autocomplete_li" data-text="{{item.text}}">{{if item.html}}{{@item.html}}{{else if item.text}}{{item.text}}{{/if}}</div>{{/each}}'
})
