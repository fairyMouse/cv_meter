import $ from 'jquery'
import sg from '../sg.js'
import './datepicker.css'

sg.Component.define('DatePicker', {
  template: '<div class="sg_datepicker sg_datepicker_mode_{{mode}}" style="display: none;">\
          <div class="sg_datepicker_header">\
            <div class="sg_datepicker_prev"><i class="icon_arrow_left"></i></div>\
            <div class="sg_datepicker_title"></div>\
            <div class="sg_datepicker_next"><i class="icon_arrow_right"></i></div>\
          </div>\
          <div class="sg_datepicker_months"></div>\
          <div class="sg_datepicker_years"></div>\
          <div class="sg_datepicker_days"></div>\
        </div>',
  properties: {
    _year: null,
    _month: null,
    _day: null,
    _startYear: null,
    _curYear: null,
    _curMonth: null,
    _curView: null, // 1:year, 2:month, 3:day, 4:time
    mode: 'month', // 模式，month：月份，day：日期
    stopPropagation: false, // 是否阻止点击冒泡
    onShow: null, // 展示回调
    onHide: null, // 隐藏回调
    onSelect: null, // 选中回调，data格式：{year:2017,month:1,day:2,date:'2017-02-02'}
    position: 'parent', // 位置，parent：跟随父元素，click：跟随点击位置，空：不做位置修改
    monthArray: [ // 月份字符串配置
      '1月',
      '2月',
      '3月',
      '4月',
      '5月',
      '6月',
      '7月',
      '8月',
      '9月',
      '10月',
      '11月',
      '12月'
    ],
    yearSuffix: '', // 顶部年份展示后缀
    minDate: null, // 最小日期，'2017-08'
    maxDate: null, // 最大日期, '2017-09'
    initDate: null // 初始日期，'2017-08'
  },
  setValue: function (initDate) {
    let self = this
    let $handle = self.$parent
    self._setValue(initDate)
    if ($handle.is('input')) {
      $handle.val(initDate)
    }
    return self
  },
  _setValue: function (initDate) {
    let self = this
    let date
    if (initDate) {
      date = new Date(initDate.replace(/-/g, '/'))
      if (!+date) {
        date = new Date()
      }
    } else if (initDate !== undefined) {
      date = new Date()
    }
    if (date) {
      self._year = date.getFullYear()
      self._month = date.getMonth() + 1
      self._day = date.getDate()
    }
    self._curYear = self._year
    self._curMonth = self._month
    self._startYear = self._curYear - self._curYear % 12
    if (self.mode === 'month') {
      self._renderMonth()
    } else if (self.mode === 'day') {
      self._renderDay()
    }
  },
  onBeforeRender: function (next) {
    let self = this
    if (self.minDate) {
      self.minDate = self.minDate.replace(/-/g, '/')
      let tmp_date = new Date(self.minDate)
      self.minYear = tmp_date.getFullYear()
      self.minMonth = tmp_date.getMonth() + 1
      self.minDay = tmp_date.getDate()
    }
    if (self.maxDate) {
      self.maxDate = self.maxDate.replace(/-/g, '/')
      let tmp_max_date = new Date(self.maxDate)
      self.maxYear = tmp_max_date.getFullYear()
      self.maxMonth = tmp_max_date.getMonth() + 1
      self.maxDay = tmp_max_date.getDate()
    }
    next({
      mode: self.mode
    }, 2)
  },
  onRender: function () {
    let self = this
    let $handle = self.$parent
    let $menu = self.$dom
    self._setValue(self.initDate)
    $handle.addClass('sg_datepicker_handle')
    $handle.bind('click', self.events.handleClick)
    if ($handle.is('input')) {
      $handle.bind('input', self.events.handleChange)
    }
    $menu.bind('click', self.events.menuClick)
    $(document).bind('click', self.events.domClick)
  },
  _renderMonth: function () {
    let self = this
    let $dom = self.$dom
    let monthArray = self.monthArray
    let $months = $dom.find('.sg_datepicker_months')
    let $years = $dom.find('.sg_datepicker_years')
    let $days = $dom.find('.sg_datepicker_days')
    let $title = $dom.find('.sg_datepicker_title')
    let $pre = $dom.find('.sg_datepicker_prev')
    let $next = $dom.find('.sg_datepicker_next')
    let next_disable = false
    let pre_disable = false
    if (self.minYear && self._curYear <= self.minYear) {
      pre_disable = true
    }
    if (self.maxYear && self._curYear > self.maxYear) {
      next_disable = true
    }
    let list = []
    let tmp_item
    for (let i = 0; i < 12; i++) {
      tmp_item = {
        id: i,
        text: monthArray[i]
      }
      if (self._curYear === self._year && i === self._month) {
        tmp_item.selected = 1
      }
      if ((self.minYear && self._curYear <= self.minYear) && (self.minMonth && i < self.minMonth)) {
        tmp_item.disabled = 1
      }
      list.push(tmp_item)
    }
    sg.View.require('_DatePickerMonth').render($months, {
      list: list
    })
    $months.show()
    $years.hide()
    $days.hide()
    $title.text(self._curYear + self.yearSuffix)
    self._curView = 2
    if (pre_disable) {
      $pre.addClass('disabled')
    } else {
      $pre.removeClass('disabled')
    }
    if (next_disable) {
      $next.addClass('disabled')
    } else {
      $next.removeClass('disabled')
    }
  },
  _renderYear: function () {
    let self = this
    let $dom = self.$dom
    let $years = $dom.find('.sg_datepicker_years')
    let $months = $dom.find('.sg_datepicker_months')
    let $days = $dom.find('.sg_datepicker_days')
    let $title = $dom.find('.sg_datepicker_title')
    let $pre = $dom.find('.sg_datepicker_prev')
    let $next = $dom.find('.sg_datepicker_next')
    let list = []
    let tmp_item
    let pre_disable = false
    let next_disable = false // 标记向后的日期是否可选
    if (self.minYear && self._startYear <= self.minYear) {
      pre_disable = true
    }
    if (self.maxYear && self._startYear > self.maxYear) {
      next_disable = true
    }
    for (let i = self._startYear; i < self._startYear + 12; i++) {
      tmp_item = {
        id: i,
        text: i + self.yearSuffix
      }
      if (i === self._year) {
        tmp_item.selected = 1
      }
      if (self.minYear && i < self.minYear) {
        tmp_item.disabled = 1
      }
      list.push(tmp_item)
    }
    sg.View.require('_DatePickerYear').render($years, {
      list: list
    })
    $years.show()
    $months.hide()
    $days.hide()
    $title.text(self._startYear + self.yearSuffix + ' - ' + (self._startYear + 11) + self.yearSuffix)
    self._curView = 1
    if (pre_disable) {
      $pre.addClass('disabled')
    } else {
      $pre.removeClass('disabled')
    }
    if (next_disable) {
      $next.addClass('disabled')
    } else {
      $next.removeClass('disabled')
    }
  },
  _renderDay: function () {
    let self = this
    let $dom = self.$dom
    let $years = $dom.find('.sg_datepicker_years')
    let $months = $dom.find('.sg_datepicker_months')
    let $days = $dom.find('.sg_datepicker_days')
    let $title = $dom.find('.sg_datepicker_title')
    let $pre = $dom.find('.sg_datepicker_prev')
    let $next = $dom.find('.sg_datepicker_next')
    let list = []
    let tmp_item
    let pre_disable = false
    let next_disable = false
    if (self.minYear) {
      if (self._curYear < self.minYear) {
        pre_disable = true
      } else if (self.minMonth !== undefined && self._curYear === self.minYear) {
        if (self._curMonth <= self.minMonth) {
          pre_disable = true
        }
      }
    }
    // 设置最大可选的年份，月份
    if (self.maxYear) {
      if (self._curYear > self.maxYear) {
        next_disable = true
      } else if (self.maxMonth !== undefined && self._curYear === self.maxYear) {
        if (self._curMonth >= self.maxMonth) {
          next_disable = true
        }
      }
    }

    // 获取当月总天数
    let days = self._getDaysInMonth(self._curYear, self._curMonth)
    let last_days = self._getDaysInLastMonth(self._curYear, self._curMonth)
    // 获取月初星期
    let tmp_date = new Date(self._curYear, self._curMonth, 1)
    let start_day = tmp_date.getDay()
    // 获取月末星期
    tmp_date = new Date(self._curYear, self._curMonth, days)
    let end_day = tmp_date.getDay()
    let i

    // 填充上个月的日期
    if (start_day === 0) {
      for (i = 5; i >= 0; i--) {
        list.push({
          text: last_days - i,
          disabled: 1
        })
      }
    } else if (start_day > 1) {
      for (i = start_day - 2; i >= 0; i--) {
        list.push({
          text: last_days - i,
          disabled: 1
        })
      }
    }

    // 填充本月日期
    for (i = 1; i <= days; i++) {
      tmp_item = {
        id: i,
        text: i,
        disabled: 0
      }
      if (self._year === self._curYear && self._month === self._curMonth && i === self._day) {
        tmp_item.selected = 1
      }
      // 设置最小日期之前的天不能选择，i为天
      // 当前年与最小年一致，当前月与最小月相同
      if (self.minYear) {
        if (self._curYear === self.minYear && self.minMonth !== undefined && self._curMonth === self.minMonth) {
          if (i < self.minDay) {
            tmp_item.disabled = 1
          }
        }
      }
      // 设置最大日期之后的天不能选择
      if (self.maxYear) {
        if (self._curYear === self.maxYear && self.maxMonth !== undefined && self._curMonth === self.maxMonth) {
          if (i > self.maxDay) {
            tmp_item.disabled = 1
          }
        }
      }
      list.push(tmp_item)
    }

    // 填充下个月日期
    if (end_day > 0) {
      for (i = 1; i <= 7 - end_day; i++) {
        list.push({
          text: i,
          disabled: 1
        })
      }
    }

    sg.View.require('_DatePickerDay').render($days, {
      list: list
    })
    $years.hide()
    $months.hide()
    $days.show()
    $title.text(self._curYear + ' - ' + sg.utils.stringPadLeft(self._curMonth.toString(), '0', 2))
    self._curView = 3
    if (pre_disable) {
      $pre.addClass('disabled')
    } else {
      $pre.removeClass('disabled')
    }
    if (next_disable) {
      $next.addClass('disabled')
    } else {
      $next.removeClass('disabled')
    }
  },
  _getDaysInMonth: function (year, month) {
    return new Date(year, month, 0).getDate()
  },
  _getDaysInLastMonth: function (year, month) {
    if (month === 0) {
      year--
      month = 11
    } else {
      month--
    }
    return this._getDaysInMonth(year, month)
  },
  events: {
    domClick: function (e) {
      let self = this
      let $target = $(e.target)
      let $menu = $target.closest('.sg_datepicker')
      let $handle = $target.closest('.sg_datepicker_handle')
      if (($handle.length && self.$parent.is($handle)) || ($menu.length && self.$dom.is($menu))) {
        return
      }
      self.hide()
    },
    handleChange: function (e) {
      let self = this
      let $handle = self.$parent
      self._setValue($handle.val())
    },
    handleClick: function (e) {
      let self = this
      let $dom = self.$dom
      let $handle = self.$parent
      let position
      if (!$dom.is(':visible')) {
        switch (self.position) {
          case 'parent':
            position = $handle.position()
            position.top += $handle.outerHeight()
            break
          case 'click':
            position = {
              top: e.pageY,
              left: e.pageX
            }
            break
          default:
            position = {}
            break
        }
        $dom.css(position)
        if ($handle.is('input')) {
          let value = $handle.val()
          self._setValue(value)
        } else {
          self._setValue()
        }
        self.show()
      } else {
        if (!$handle.is('input')) {
          self.hide()
        }
      }
      return !self.stopPropagation
    },
    menuClick: function (e) {
      let self = this
      let $target = $(e.target)
      let $title = $target.closest('.sg_datepicker_title')
      let $pre = $target.closest('.sg_datepicker_prev')
      let $next = $target.closest('.sg_datepicker_next')
      let $year = $target.closest('.sg_datepicker_year')
      let $month = $target.closest('.sg_datepicker_month')
      let $day = $target.closest('.sg_datepicker_day')
      if ($title.length) {
        switch (self._curView) {
          case 1:
            break
          case 2:
            self._renderYear()
            break
          case 3:
            self._renderMonth()
            break
          default:
            break
        }
      } else if ($pre.length) {
        if (!$pre.hasClass('disabled')) {
          switch (self._curView) {
            case 1:
              self._startYear = self._startYear - 12
              self._renderYear()
              break
            case 2:
              self._curYear--
              self._startYear = self._curYear - self._curYear % 12
              self._renderMonth()
              break
            case 3:
              if (self._curMonth === 0) {
                self._curMonth = 11
                self._curYear--
                self._startYear = self._curYear - self._curYear % 12
              } else {
                self._curMonth--
              }
              self._renderDay()
              break
            default:
              break
          }
        }
      } else if ($next.length) {
        if (!$next.hasClass('disabled')) {
          switch (self._curView) {
            case 1:
              self._startYear = self._startYear + 12
              self._renderYear()
              break
            case 2:
              self._curYear++
              self._startYear = self._curYear - self._curYear % 12
              self._renderMonth()
              break
            case 3:
              if (self._curMonth === 11) {
                self._curMonth = 0
                self._curYear++
                self._startYear = self._curYear - self._curYear % 12
              } else {
                self._curMonth++
              }
              self._renderDay()
              break
            default:
              break
          }
        }
      } else if ($year.length) {
        if (!$year.hasClass('disabled')) {
          switch (self.mode) {
            case 'month':
            case 'day':
              self._curYear = $year.data('id')
              self._renderMonth()
              break
            default:
              break
          }
        }
      } else if ($month.length) {
        if (!$month.hasClass('disabled')) {
          switch (self.mode) {
            case 'month':
              self._year = self._curYear
              self._month = $month.data('id')
              self.hide()
              self._onSelect()
              break
            case 'day':
              self._curMonth = $month.data('id')
              self._renderDay()
              break
            default:
              break
          }
        }
      } else if ($day.length) {
        if (!$day.hasClass('disabled')) {
          switch (self.mode) {
            case 'day':
              self._year = self._curYear
              self._month = self._curMonth
              self._day = $day.data('id')
              self.hide()
              self._onSelect()
              break
            default:
              break
          }
        }
      } else {
        // 待定
      }
      return !self.stopPropagation
    }
  },
  _onSelect: function () {
    let self = this
    let $handle = self.$parent
    let value = self.getValue()
    if ($handle.is('input')) {
      $handle.val(value.date)
    }
    self.onSelect && self.onSelect(value)
  },
  show: function () {
    let self = this
    let $menu = self.$dom
    $menu.show()
    self.onShow && self.onShow()
    return self
  },
  hide: function () {
    let self = this
    let $menu = self.$dom
    $menu.hide()
    self.onHide && self.onHide()
    return self
  },
  getValue: function () {
    let self = this
    if (self.mode === 'month') {
      return {
        year: self._year,
        month: self._month,
        date: self._year + '-' + sg.utils.stringPadLeft(self._month.toString(), '0', 2)
      }
    } else if (self.mode === 'day') {
      return {
        year: self._year,
        month: self._month,
        day: self._day,
        date: self._year + '-' + sg.utils.stringPadLeft(self._month.toString(), '0', 2) + '-' + sg.utils.stringPadLeft(self._day.toString(), '0', 2)
      }
    }
  },
  onBeforeDestroy: function (next) {
    let self = this
    let $handle = self.$parent
    $handle.removeClass('sg_datepicker_handle')
    $handle.unbind('click', self.events.handleClick)
    if ($handle.is('input')) {
      $handle.unbind('change', self.events.handleChange)
    }
    $(document).unbind('click', self.events.domClick)
    next()
  }
})

sg.View.define('_DatePickerMonth', {
  template: '{{each list item}}\
          <div class="sg_datepicker_month{{if item.selected}} selected{{/if}}{{if item.disabled}} disabled{{/if}}" data-id="{{item.id}}">{{item.text}}</div>\
          {{/each}}'
})

sg.View.define('_DatePickerYear', {
  template: '{{each list item}}\
          <div class="sg_datepicker_year{{if item.selected}} selected{{/if}}{{if item.disabled}} disabled{{/if}}" data-id="{{item.id}}">{{item.text}}</div>\
          {{/each}}'
})

sg.View.define('_DatePickerDay', {
  template: '<div class="sg_datepicker_day_head"><div class="sg_datepicker_day disabled">一</div><div class="sg_datepicker_day disabled">二</div><div class="sg_datepicker_day disabled">三</div><div class="sg_datepicker_day disabled">四</div><div class="sg_datepicker_day disabled">五</div><div class="sg_datepicker_day disabled">六</div><div class="sg_datepicker_day disabled">日</div> </div>\
        <div class="sg_datepicker_day_body">\
        {{each list item}}\
          <div class="sg_datepicker_day{{if item.selected}} selected{{/if}}{{if item.disabled}} disabled{{/if}}" data-id="{{item.id}}">{{item.text}}</div>\
        {{/each}}\
        </div> '
})
