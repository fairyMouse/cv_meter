import sg from '../sg.js'

sg.Component.define('Switch', {
  properties: {
    width: 50,
    height: 30,
    color: '#18B8F5',
    value: 0,
    onChange: null
  },
  template: `<div class="sg_switch" style="{{style}}">
<div class="sg_switch_handle" style="{{handleStyle}}"></div>
</div>`,
  onBeforeRender: function (next) {
    let self = this
    let styleList = {
      width: self.width + 'px',
      height: self.height + 'px',
      'background-color': '#ffffff',
      'border-radius': self.height / 2 + 'px',
      border: '1px solid #E4E4E4',
      display: 'inline-block',
      'transition': 'all .2s'
    }
    let handleStyleList = {
      width: self.height + 'px',
      height: self.height + 'px',
      'background-color': '#ffffff',
      'border-radius': self.height / 2 + 'px',
      'box-shadow': '0 2px 4px rgba(0, 0, 0, .3)',
      'transition': 'all .2s'
    }
    next({
      style: sg.utils.obj2Style(styleList),
      handleStyle: sg.utils.obj2Style(handleStyleList)
    })
  },
  onRender: function () {
    let self = this
    let $switch = self.$dom

    $switch.on('click', function () {
      if (self.value) {
        self.close()
      } else {
        self.open()
      }
      self.$parent.trigger('change', {
        'switch': self
      })
      self.onChange && self.onChange(self.value)
    })

    // 初始化开关状态
    if (self.value) {
      self.open()
    }
  },
  open: function () {
    let self = this
    let $switch = self.$dom
    let $switchHandle = $switch.find('.sg_switch_handle')
    self.value = 1
    $switch.css({
      'background-color': self.color
    })
    $switchHandle.css({
      '-webkit-transform': 'translateX(' + (self.width - self.height) + 'px)',
      transform: 'translateX(' + (self.width - self.height) + 'px)'
    })
    self.value = 1
  },
  close: function () {
    let self = this
    let $switch = self.$dom
    let $switchHandle = $switch.find('.sg_switch_handle')
    self.value = 1
    $switch.css({
      'background-color': '#ffffff'
    })
    $switchHandle.css({
      '-webkit-transform': 'translateX(0)',
      transform: 'translateX(0)'
    })
    self.value = 0
  },
  getValue: function () {
    return this.value
  }
})
