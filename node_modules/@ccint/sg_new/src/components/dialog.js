import $ from 'jquery'
import sg from '../sg.js'
import './dialog.css'

sg.Component.define('Dialog', {
  template: '<div class="sg_dialog{{if boxClass}} {{boxClass}}{{/if}}"> ' +
  '<div class="sg_dialog_mask"></div> ' +
  '<div class="sg_dialog_content_wrapper sg_scroll_y"> ' +
  '<div class="sg_dialog_content">' +
  '{{if closeBtn}}' +
  '<div class="icon_close sg_dialog_btn_close"></div>' +
  '{{/if}}' +
  '{{text}}</div>' +
  '</div> ' +
  '</div>',
  properties: {
    text: '', // 弹出框的文本内容
    vm: '', // 弹出框的vm对象
    vmData: {}, // vm对象的渲染参数
    showAnimation: 'fadeInUp', // 展现动画
    hideAnimation: 'fadeOutDown', // 隐藏动画
    boxClass: '', // 弹出框最外层class
    once: true, // 弹出框是否只展示一次
    closeByMask: true, // 是否可以通过点击mask来关闭弹出框
    closeBtn: true, // 是否需要关闭按钮
    verticalMiddle: false, // 是否需要垂直居中
    onHide: null, // 关闭dialog回调
    onShow: null, // 展示dialog回调
    lockScroll: false // 是否需要锁全局滚动
  },
  onBeforeRender: function (next) {
    let self = this
    next({
      closeBtn: self.closeBtn,
      text: self.text,
      boxClass: self.boxClass
    }, 1)
  },
  onRender: function () {
    let self = this
    let $dialog = self.$dom
    let $dialog_content_wrapper = $dialog.find('.sg_dialog_content_wrapper')
    let $dialog_content = $dialog.find('.sg_dialog_content')
    let $dialog_btn_close = $dialog.find('.sg_dialog_btn_close')
    $dialog_btn_close.bind('click', function () {
      self.hide()
    })
    if (self.vm) {
      self.vm.dialog = self
      self.vm.render($dialog_content, self.vmData, null, 1)
    }
    if (self.closeByMask) {
      $dialog_content_wrapper.on('click', function (e) {
        if ($(e.target).is($dialog_content_wrapper)) {
          self.hide()
        }
      })
    }
    $dialog.hide()
  },
  _resize: function () {
    let self = this
    let $dialog = self.$dom
    let $dialog_content = $dialog.find('.sg_dialog_content')
    let container_height = $(window).height()
    let dialog_height = $dialog_content.height()
    let diff = container_height - dialog_height
    let top = self.verticalMiddle ? (container_height - dialog_height) * 0.5 : (diff / dialog_height < 0.618) ? diff / 2 : container_height * 0.382 - dialog_height / 2
    top = Math.max(30, top)
    let bottom = 0
    if (top === 30) {
      bottom = top
    }
    $dialog_content.css({
      'margin-top': top,
      'margin-bottom': bottom
    })
  },
  show: function (reset) {
    let self = this
    if (reset) {
      self.refresh()
    }
    self.$dom.show()
    self._resize()
    self.$dom.hide()
    if (self.showAnimation) {
      self.$dom.find('.sg_dialog_content_wrapper').addClass('sg_dialog_overflow_hidden')
      self.$dom.find('.sg_dialog_content').animateCss(self.showAnimation, function () {
        self.$dom.find('.sg_dialog_content_wrapper').removeClass('sg_dialog_overflow_hidden')
      })
    }
    self.$dom.show()
    self.onShow && self.onShow()
    self.$dom.find('.sg_dialog_mask').animateCss('maskFadeIn')
    if (self.lockScroll) {
      let $body = $('body')
      let scroll_bar_width = self._getScrollBarWidth($body)
      $body
        .css('margin-right', scroll_bar_width + (parseFloat($body.css('margin-right')) || 0))
        .css('overflow-y', 'hidden')
    }
    return self
  },
  hide: function () {
    let self = this
    let $dialog = self.$dom
    if (!$dialog) {
      return self
    }
    if (self.lockScroll) {
      $('body').css({
        'margin-right': 0,
        'overflow-y': 'auto'
      })
    }
    if (self.hideAnimation) {
      $dialog.find('.sg_dialog_content_wrapper').addClass('sg_dialog_overflow_hidden')
      $dialog.find('.sg_dialog_mask').animateCss('maskFadeOut')
      $dialog.find('.sg_dialog_content').animateCss(self.hideAnimation, function () {
        $dialog.find('.sg_dialog_content_wrapper').removeClass('sg_dialog_overflow_hidden')
        self._hide()
      })
    } else {
      self._hide()
    }
    return self
  },
  _hide: function () {
    let self = this
    let $dialog = self.$dom
    $dialog.hide()
    self.onHide && self.onHide()
    if (self.once) {
      self.destroy()
    }
  },
  _getScrollBarWidth: function ($dom) {
    if (!$dom.length || $dom.css('scroll') === 'hidden') {
      return 0
    }
    let overflow = $dom.get(0).style.overflowY
    let width = $dom.outerWidth(true) - $dom.css('overflow-y', 'hidden').outerWidth(true)
    $dom.css('overflow-y', overflow)
    return -width
  }
})
