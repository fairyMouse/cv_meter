import sg from '../sg.js'
import './datepickermo.css'

sg.Component.define('DatePickerMo', {
  template: '<div class="sg_datepicker_mo">\
  <div class="sg_datepicker_mo_mask"></div>\
  <div class="sg_datepicker_mo_box">\
    <div class="sg_datepicker_mo_btns">\
      <a class="sg_datepicker_mo_btn_cancel">取消</a>\
      <a class="sg_datepicker_mo_btn_confirm">确定</a>\
    </div>\
    <div class="sg_datepicker_mo_main">\
      <div class="sg_datepicker_mo_row sg_datepicker_mo_row_year"></div>\
      {{if mode == "month" || mode == "day"}}\
      <div class="sg_datepicker_mo_row sg_datepicker_mo_row_month"></div>\
      {{/if}}\
      {{if mode == "day"}}\
      <div class="sg_datepicker_mo_row sg_datepicker_mo_row_day"></div>\
      {{/if}}\
    </div>\
  </div>\
  </div>',
  properties: {
    mode: 'year', // 模式，year：年份，month：月份，day：日期
    onSelect: null, // 选中回调，data格式：{year:2017,month:1,day:2,date:'2017-02-02'}
    onShow: null, // 显示回调
    onHide: null, // 隐藏回调，包括点mask隐藏
    selectArea: 50, // 年份选择区间
    radius: 108, // 滚轮半径
    deg: 25, // 滚轮角度差
    monthSuffix: '月', // 月份展示后缀
    yearSuffix: '年', // 年份展示后缀
    daySuffix: '日', // 年份展示后缀
    minDate: null, // 最小日期，'2017-08'
    maxDate: null, // 最大日期, '2017-09'
    initDate: null, // 初始日期，'2017-08'
    _comYear: null,
    _comMonth: null,
    _comDay: null
  },
  onBeforeRender: function (next) {
    let self = this
    if (self.minDate) {
      let tmp_date = self._parseDate(self.minDate)
      if (tmp_date) {
        self.minYear = tmp_date.getFullYear()
        self.minMonth = tmp_date.getMonth() + 1
        self.minDay = tmp_date.getDate()
      }
    }
    if (self.maxDate) {
      let tmp_max_date = self._parseDate(self.maxDate)
      self.maxYear = tmp_max_date.getFullYear()
      self.maxMonth = tmp_max_date.getMonth() + 1
      self.maxDay = tmp_max_date.getDate()
    }
    next({
      mode: self.mode
    }, 2)
  },
  onRender: function () {
    let self = this
    let $dom = self.$dom
    let $parent = self.$parent
    let $btn_cancel = $dom.find('.sg_datepicker_mo_btn_cancel, .sg_datepicker_mo_mask')
    let $btn_confirm = $dom.find('.sg_datepicker_mo_btn_confirm')

    $parent.on('click', self.events.parentClick)

    $btn_cancel.on('click', function () {
      self.hide()
    })

    $btn_confirm.on('click', function () {
      self.initDate = self.getValue().date
      self.hide()
      self.onSelect && self.onSelect(self.getValue())
    })
  },
  onBeforeDestroy: function (next) {
    let self = this
    let $parent = self.$parent
    $parent.off('click', self.events.parentClick)
    next()
  },
  events: {
    parentClick: function () {
      this.show()
    }
  },
  show: function () {
    let self = this
    let $dom = self.$dom
    self.setValue(self.initDate)
    $dom.show()
    $dom.find('.sg_datepicker_mo_mask').animateCss('fadeIn')
    $dom.find('.sg_datepicker_mo_box').animateCss('fadeInUp', function () {
      self.onShow && self.onShow()
    })
  },
  hide: function () {
    let self = this
    let $dom = self.$dom
    $dom.find('.sg_datepicker_mo_mask').animateCss('fadeOut')
    $dom.find('.sg_datepicker_mo_box').animateCss('fadeOutDown', function () {
      $dom.hide()
      self.onHide && self.onHide()
    })
  },
  setValue: function (initDate) {
    let self = this
    let date
    if (initDate) {
      date = self._parseDate(initDate)
      if (!date) {
        date = new Date()
      }
    } else {
      date = new Date()
    }
    self._year = self.initYear = date.getFullYear()
    self._month = self.initMonth = date.getMonth() + 1
    self._day = self.initDay = date.getDate()
    self._renderYear()
    if (self.mode === 'month') {
      self._renderMonth()
    }
    if (self.mode === 'day') {
      self._renderMonth()
      self._renderDay()
    }
  },
  getValue: function () {
    let self = this
    if (self.mode === 'year') {
      return {
        year: self._year,
        date: self._year.toString()
      }
    } else if (self.mode === 'month') {
      return {
        year: self._year,
        month: self._month,
        date: self._year + '-' + sg.utils.stringPadLeft(self._month.toString(), '0', 2)
      }
    } else if (self.mode === 'day') {
      return {
        year: self._year,
        month: self._month,
        day: self._day,
        date: self._year + '-' + sg.utils.stringPadLeft(self._month.toString(), '0', 2) + '-' + sg.utils.stringPadLeft(self._day.toString(), '0', 2)
      }
    }
  },
  _renderYear: function () {
    let self = this
    let $dom = self.$dom
    let $row = $dom.find('.sg_datepicker_mo_row_year')
    let year_list = self._getYearList()

    if (self._comYear) {
      self._comYear.list = year_list.list
      self._comYear.curIndex = year_list.index
      self._comYear.refresh()
    } else {
      self._comYear = sg.Component.RollView($row, {
        list: year_list.list,
        curIndex: year_list.index,
        radius: self.radius,
        deg: self.deg,
        onChange: function (selectValue) {
          self._year = selectValue.value
          if (self._comMonth) {
            let month_list = self._getMonthList()
            self._comMonth.list = month_list.list
            self._comMonth.curIndex = month_list.index
            self._comMonth.refresh()
            self._month = self._comMonth.getValue().value
          }
          if (self._comDay) {
            let day_list = self._getDayList()
            self._comDay.list = day_list.list
            self._comDay.curIndex = day_list.index
            self._comDay.refresh()
            self._day = self._comDay.getValue().value
          }
        }
      })
    }
  },
  _renderMonth: function () {
    let self = this
    let $dom = self.$dom
    let $row = $dom.find('.sg_datepicker_mo_row_month')
    let month_list = self._getMonthList()

    if (self._comMonth) {
      self._comMonth.list = month_list.list
      self._comMonth.curIndex = month_list.index
      self._comMonth.refresh()
    } else {
      self._comMonth = sg.Component.RollView($row, {
        list: month_list.list,
        curIndex: month_list.index,
        radius: self.radius,
        deg: self.deg,
        onChange: function (selectValue) {
          self._month = selectValue.value
          if (self._comDay) {
            let day_list = self._getDayList()
            self._comDay.list = day_list.list
            self._comDay.curIndex = day_list.index
            self._comDay.refresh()
            self._day = self._comDay.getValue().value
          }
        }
      })
    }
  },
  _renderDay: function () {
    let self = this
    let $dom = self.$dom
    let $row = $dom.find('.sg_datepicker_mo_row_day')
    let day_list = self._getDayList()

    if (self._comDay) {
      self._comDay.list = day_list.list
      self._comDay.curIndex = day_list.index
      self._comDay.refresh()
    } else {
      self._comDay = sg.Component.RollView($row, {
        list: day_list.list,
        curIndex: day_list.index,
        radius: self.radius,
        deg: self.deg,
        onChange: function (selectValue) {
          self._day = selectValue.value
        }
      })
    }
  },
  _getYearList: function () {
    let self = this
    let list = []
    let index = 0
    let start = self.minYear === undefined ? (self.initYear - self.selectArea) : self.minYear
    let end = self.maxYear === undefined ? (self.initYear + self.selectArea) : self.maxYear
    for (let i = start; i <= end; i++) {
      if (i === self._year) {
        index = i - start
      }
      list.push({
        value: i,
        text: i + self.yearSuffix
      })
    }
    return {
      index: index,
      list: list
    }
  },
  _getMonthList: function () {
    let self = this
    let list = []
    let index = 0
    let start
    let end

    if (self.minYear !== undefined && self._year === self.minYear) {
      start = self.minMonth
    } else {
      start = 1
    }

    if (self.maxYear !== undefined && self._year === self.maxYear) {
      end = self.maxMonth
    } else {
      end = 12
    }

    for (let i = start; i <= end; i++) {
      if (i === self._month) {
        index = i - start
      }
      list.push({
        value: i,
        text: i + self.monthSuffix
      })
    }
    return {
      index: index,
      list: list
    }
  },
  _getDayList: function () {
    let self = this
    let list = []
    let index = 0
    let start
    let end

    if (self.minYear !== undefined && self._year === self.minYear && self._month === self.minMonth) {
      start = self.minDay
    } else {
      start = 1
    }

    if (self.maxYear !== undefined && self._year === self.maxYear && self._month === self.maxMonth) {
      end = self.maxDay
    } else {
      end = self._getDaysInMonth(self._year, self._month)
    }

    for (let i = start; i <= end; i++) {
      if (i === self._day) {
        index = i - start
      }
      list.push({
        value: i,
        text: i + self.daySuffix
      })
    }
    return {
      index: index,
      list: list
    }
  },
  _getDaysInMonth: function (year, month) {
    return new Date(year, month, 0).getDate()
  },
  _parseDate: function (dateString) {
    let tmp_date
    tmp_date = new Date(dateString.replace(/-/g, '/'))
    if (!+tmp_date) {
      tmp_date = new Date(dateString)
      if (!+tmp_date) {
        return false
      }
    }
    return tmp_date
  }
})
