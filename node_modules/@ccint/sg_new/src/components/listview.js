import $ from 'jquery'
import sg from '../sg.js'

sg.Component.define('ListView', {
  properties: {
    item_vm: '', // 列表中每一个元素的ViewModel
    // general list view
    list_data: [], // 内容
    // ajax list view
    url: '', // url不为空时变成ajax-list-view
    method: 'GET', // method
    start: 0, // 初始偏移
    limit: 10, // 每页加载个数
    params: {}, // 基本参数
    format: { // 传参格式
      start: 'start', // 分页start参数名
      limit: 'len' // 分页limit参数名
    },
    // error handler
    onError: null,
    onAjaxError: null,
    empty: null,
    // 列表中元素afterRender
    itemBeforeRender: function (data) {},
    itemAfterRender: function ($dom) {},
    done: function () {}
  },
  template: '{{each data item}}' +
  '<div class="sg_listview">' +
  '<div sg-view="{{vm_name}}">' +
  '<param id="item" type="json" value="{{item.replace(/&quot;/ig, \'\')}}">' +
  '</div>' +
  '</div>' +
  '{{/each}}',

  onBeforeRender: function (next) {
    let self = this
    // lack of view model
    if (!self.item_vm) {
      let error = 'lack of sub view model'
      sg.fire('list_view_error', error)
      self.onError && self.onError(error)
      return
    }

    if (self.url) {
      // ajax list view
      self.offset = self.start
      self._request(self.limit, function (data, is_end) {
        next({
          data: data,
          vm_name: self.item_vm,
          is_end: is_end
        })
      })
      let count = 0
      sg.un(self.item_vm + '_afterrender')
      sg.on(self.item_vm + '_afterrender', function (event) {
        count++
        if (self.limit - self.is_end === count) {
          self.done(event.$dom, self.originData, self.is_end)
          sg.un(self.item_vm + '_afterrender')
        }
      })
    } else {
      // 普通listview
      if (!$.isArray(self.data)) {
        let error = 'invalid data format'
        sg.fire('listview_error', error)
        self.onAjaxError && self.onAjaxError(error)
        return
      }
      next({
        data: self.data,
        vm_name: self.item_vm
      })
    }
  },

  onRender: function (data) {
    let self = this
    let $dom = self.$parent
    if (data.data && !data.data.length) {
      self.empty($dom)
      return
    }
    // 子模块ViewModel执行afterRender
    self.is_end = data.is_end
    sg.View.remove(self.item_vm)
    sg.View.define(self.item_vm, {
      onBeforeRender: function (next, data) {
        self.itemBeforeRender(data)
        next(data.item)
      },
      onRender: function () {
        self.itemAfterRender(this.$parent)
        sg.fire(self.item_vm + '_afterrender', {
          $dom: $dom
        })
      }
    })
  },

  /**
   * 获得当前分页的偏移量
   */
  getOffset: function () {
    return this.offset || 0
  },

  /**
   * 获得接口的总量
   */
  getTotal: function () {
    return this.total || 0
  },

  /**
   * 加载下一页并append到最后
   * @param next 返回的数据
   * @param offset 指定加载的偏移量
   */
  append: function (next, offset) {
    let self = this
    if (offset) self.offset = offset
    self._request(self.limit, function (data, is_end) {
      $.each(data, function (key, item) {
        let $tmpdom = $('<div class="sg_listview"></div>')
        sg.View.require(self.item_vm).render($tmpdom, {
          item: JSON.parse(item),
          is_end: is_end
        })
        self.$parent.append($tmpdom)
      })
      self.done(self.$parent, self.originData, is_end)
    }, function (error) {
      typeof next === 'function' && next(error)
    })
  },

  /**
   * 发请求
   */
  _request: function (limit, success, fail) {
    let self = this
    let param_start = self.format.start
    let param_limit = self.format.limit
    let params = self.params

    params[param_start] = self.offset
    params[param_limit] = limit
    sg.Model.get(self.url, false, self.method === 'POST').getData(params,
      function (data) {
        if (data.errno) {
          sg.fire('listview_ajax_error', data)
          self.onAjaxError && self.onAjaxError(data)
          fail && fail(data)
          return
        }
        self.originData = data.data
        self.total = self.originData.total
        data = self._findResponseArray(data)
        // data内部数据化成json,用于直接传入下一层viewmodel
        data = $.map(data, function (item) {
          return JSON.stringify(item)
        })
        self.offset += data.length
        if (!self.total) self.total = self.offset
        success && success(data, params[param_limit] - data.length)
      },
      function (error) {
        sg.fire('listview_ajax_error', error)
        self.onAjaxError && self.onAjaxError(error)
        fail && fail(error)
      }
    )
  },

  /**
   * 找到data内部array形式的数据
   */
  _findResponseArray: function (data) {
    let self = this
    let has_found = false
    if (!$.isArray(data)) {
      for (let key in data) {
        if (typeof data[key] === 'object') {
          has_found = self._findResponseArray(data[key])
        }
        if (has_found) break
      }
    } else {
      has_found = data
    }
    return has_found || []
  }
})
