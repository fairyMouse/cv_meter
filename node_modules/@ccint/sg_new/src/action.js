import $ from 'jquery'
import Event from './event.js'
import utils from './utils.js'

let actions = {
  'sg-src': {
    init: function ($dom) {
      let src = $dom.attr('sg-src')
      let type = $dom.attr('sg-src-type')
      let $parent = $dom.parent()
      let box_width = $parent.width()
      let box_height = $parent.height()
      utils.loadImage(src, function (i, offset) {
        let arr_css
        switch (type) {
          case 'full':
            arr_css = utils.resizeImageFull(offset.width, offset.height, box_width, box_height)
            break
          default:
            arr_css = utils.resizeImage(offset.width, offset.height, box_width, box_height)
            break
        }
        $dom.css(arr_css).attr('src', src)
      })
    }
  },
  'sg-bind': {
    init: function ($dom) {
      let self = this
      let value = $dom.attr('sg-bind')
      if (!Object.defineProperty || !self._id || !value) {
        return
      }
      let event_id = self._id + '-sg-bind-' + value
      Action.on(event_id, function (data) {
        $dom.text(data.text)
      })
      let descriptor = Object.getOwnPropertyDescriptor(self, value)
      if (descriptor && descriptor.hasOwnProperty('set')) {
        self[value] = self[value]
        return
      }
      let init_value = self[value]
      let tmp
      Object.defineProperty(self, value, {
        configurable: true,
        enumerable: true,
        set: function (newValue) {
          tmp = newValue
          Action.fire(event_id, {
            text: newValue
          })
        },
        get: function () {
          return tmp
        }
      })
      if (descriptor) {
        setTimeout(function () {
          self[value] = init_value
        })
      }
    },
    destroy: function ($dom) {
      let self = this
      let value = $dom.attr('sg-bind')
      if (!Object.defineProperty || !self._id || !value) {
        return
      }
      let event_id = self._id + '-sg-bind-' + value
      Action.un(event_id)
      delete self[value]
    }
  }
}

function init (vm) {
  if (!vm) {
    vm = {}
  }
  let $dom = vm.$dom || $(document.body)
  for (let i in actions) {
    $dom.each(function (j, dom) {
      if ($(dom).attr(i) !== undefined) {
        actions[i].init.call(vm, $(dom))
      }
    })
    $dom.find('[' + i + ']').each(function (j, dom) {
      actions[i].init.call(vm, $(dom))
    })
  }
}

function destroy (vm) {
  let $dom = vm.$dom
  if (!$dom) {
    return
  }
  for (let i in actions) {
    if (!actions[i].destroy) {
      continue
    }
    $dom.each(function (j, dom) {
      if ($(dom).attr(i) !== undefined) {
        actions[i].destroy.call(vm, $(dom))
      }
    })
    $dom.find('[' + i + ']').each(function (j, dom) {
      actions[i].destroy.call(vm, $(dom))
    })
  }
}

function getActions (key) {
  if (key) {
    return actions[key] || ''
  }
  return actions
}

function setActions (cfg) {
  $.extend(actions, cfg)
}

let Action = {
  deps: ['View', 'Component'],
  init: init,
  destroy: destroy,
  get: getActions,
  set: setActions
}

Event.init(Action)

export default Action
