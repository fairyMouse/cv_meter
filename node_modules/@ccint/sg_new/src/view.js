import template from 'art-template/lib/template-web.js'
import $ from 'jquery'
import utils from './utils.js'
import config from './config.js'
import Action from './action.js'

let init_list = []
let views = {}
let templates = {}

function createFunc (name, fn) {
  return new Function('fn', //eslint-disable-line
    'return function ' + name + '(){ return fn.apply(this,arguments)}'
  )(fn)
}

function init () {
  initTemplate($('[type="text/template"]'))
  for (let i = 0, length = init_list.length; i < length; i++) {
    define(init_list[i]['name'], init_list[i]['options'], true)
  }
}

function initTemplate ($dom) {
  $dom.each(function () {
    let self = $(this)
    let id = self.attr('id')
    let css = self.attr('css')
    let js = self.attr('js')
    let title = self.attr('title')
    let template
    if (!id || views[id]) {
      return
    }
    template = {
      html: self.html(),
      css: self.attr('class')
    }
    let resource = {}
    config.resource[id] = config.resource[id] || {}
    css && (resource['css'] = css.split(','))
    js && (resource['js'] = js.split(','))
    title && (resource['title'] = title)
    $.extend(config.resource[id], resource)
    templates[id] = template
  })
  $dom.remove()
}

function initViewModel (vm_name, vm_config) {
  let vm_constructor = createFunc(vm_name, ViewModel)
  utils.inherits(vm_constructor, ViewModel)
  $.extend(vm_constructor.prototype, vm_config)
  views[vm_name] = vm_constructor
  return vm_constructor
}

function loadTemplate (template, callback) {
  if (!template) {
    callback && callback()
    return
  }
  $.ajax({
    url: (config.templateApi && !config.usePath) ? config.templateApi + '?view_id=' + template : config.templateApi + template,
    type: 'GET',
    dataType: 'html',
    timeout: config.timeOut,
    success: function (data) {
      if (data.indexOf('<script') !== -1) {
        initTemplate($(data))
      }
      callback && callback()
    },
    error: function () {
      utils.log(template, 'TemplateLoadError', 2)
    }
  })
}

function getInstance (vm_name) {
  let Vm = views[vm_name]
  try {
    let instance = new Vm()
    instance.vm_name = vm_name
    if (Vm.prototype.properties) {
      $.extend(true, instance, Vm.prototype.properties)
    }
    if (Vm.prototype.events) {
      let events = {}
      for (let key in Vm.prototype.events) {
        if (Vm.prototype.events.hasOwnProperty(key)) {
          events[key] = (function (callback) {
            return function (e) {
              return callback.call(instance, e, this)
            }
          })(Vm.prototype.events[key])
        }
      }
      instance.events = events
    }
    return instance
  } catch (err) {
    console.error('Template init failed: ' + vm_name + '\n' + err.message)
  }
}

function requireViewModel (vm_name, callback) {
  if (!vm_name) {
    vm_name = config.error['404']
    if (!vm_name) {
      utils.log('sg.config.error[\'404\']', 'ViewError', 2)
      return
    }
  }

  let vm

  if (views[vm_name]) {
    vm = getInstance(vm_name)
    callback && callback(vm)
    return vm
  }

  let resource = config.resource[vm_name] || {}
  let i
  let length
  let arr_js = resource.js || []
  let arr_css = resource.css || []
  let template = resource.template
  let arr_resource = []

  if (arr_js && arr_js.length) {
    for (i = 0, length = arr_js.length; i < length; i++) {
      arr_resource.push(config.baseUrl + arr_js[i])
    }
  }

  if (arr_css && arr_css.length) {
    for (i = 0, length = arr_css.length; i < length; i++) {
      arr_resource.push(config.baseUrl + arr_css[i])
    }
  }

  function load_template_callback () {
    if (!arr_resource.length) {
      define(vm_name)
      vm = getInstance(vm_name)
      callback && callback(vm)
      return vm
    }
    utils.loadResource(arr_resource, function () {
      define(vm_name)
      if (callback && views[vm_name]) {
        vm = getInstance(vm_name)
        callback(vm)
      }
    })
  }

  if (templates[vm_name]) {
    return load_template_callback()
  } else if (template) {
    loadTemplate(template, load_template_callback)
  } else {
    // 没有模板的情况，创建空的vm
    define(vm_name)
    vm = getInstance(vm_name)
    callback && callback(vm)
    return vm
  }
}

let uuid = 1
function getUuid () {
  return 'sg_vm_' + uuid++
}

function ViewModel () {
  this._id = getUuid()
}

ViewModel.prototype = {
  keepDomBeforeRefresh: true,
  onBeforePreview: null,
  onPreview: null,
  onBeforeRender: null,
  onRender: null,
  onBeforeDestroy: null,
  onDestroy: null,
  render: function ($dom, params, callback, direction) {
    let self = this
    let preview_time = 0
    self.$parent = $dom
    params = params || {}
    if (self.onBeforePreview) {
      self.onBeforePreview(function (preview_data) {
        utils.log(self.constructor.name, 'ViewPreviewStart')
        preview_data = preview_data || {}
        preview_time = +new Date()
        self._render($.extend({
          sg_preview: 1
        }, preview_data, params), null, direction, true)
        self.onPreview && self.onPreview()
      })
    }
    if (self.onBeforeRender) {
      self.onBeforeRender(function (data, direction2) {
        if (self.onBeforePreview) {
          // 移除预览的指令
          Action.destroy(self)
          // 移除预览dom
          if (self.$dom) {
            self.$dom.remove()
            self.$dom = null
          }
          utils.log(self.constructor.name + ' : ' + (+new Date() - preview_time), 'ViewPreviewEnd')
        }
        self._render(data, callback, direction2 || direction)
      }, params, $dom)
    } else {
      self._render(params, callback, direction)
    }
  },
  _render: function (data, callback, direction, preview) {
    let self = this
    let $parent_dom = self.$parent
    let cur_template = self.template
    let css
    if ($.isPlainObject(cur_template)) {
      css = cur_template.css
      cur_template = cur_template.html
    }
    data = data || {}
    let template_str = ''
    if (cur_template) {
      template_str = template.compile(cur_template)(data)
    }
    if (!$parent_dom || !$parent_dom.length) {
      return template_str
    }
    let $dom = $(template_str)
    $parent_dom.addClass(css)
    switch (direction) {
      case -2:
        $parent_dom.before($dom)
        break
      case -1:
        $parent_dom.prepend($dom)
        break
      case 1:
        $parent_dom.append($dom)
        break
      case 2:
        $parent_dom.after($dom)
        break
      default:
        $parent_dom.html($dom)
        break
    }
    self.$dom = $dom
    Action.init(self)
    if (preview) {
      return $dom
    }
    callback && callback.call(self)
    self.onRender && self.onRender(data)
  },
  destroy: function (keep_dom) {
    let self = this
    if (self.onBeforeDestroy) {
      self.onBeforeDestroy(function () {
        self._destroy(keep_dom)
      })
    } else {
      self._destroy(keep_dom)
    }
  },
  _destroy: function (keep_dom) {
    let self = this
    let $dom = self.$dom
    if (!keep_dom && $dom) {
      Action.destroy(self)
      $dom.remove()
      self.$dom = null
      self.$parent = null
    }
    utils.log(this.constructor.name, 'ViewDestroy')
    self.onDestroy && self.onDestroy()
  },
  refresh: function () {
    let self = this
    let $parent = self.$parent
    self.destroy(self.keepDomBeforeRefresh)
    self.render($parent)
  }
}

function define (vm_name, vm_config, force) {
  if (!View.isReady && !force) {
    init_list.push({
      name: vm_name,
      options: vm_config
    })
    return
  }
  if (views[vm_name]) {
    return views[vm_name]
  }
  vm_config = vm_config || {}
  let vm_constructor
  vm_config.template = vm_config.template || templates[vm_name] || ''
  vm_constructor = initViewModel(vm_name, vm_config)
  return vm_constructor
}

function remove (vm_name) {
  let tmp = views[vm_name]
  delete views[vm_name]
  return tmp
}

let View = {
  require: requireViewModel,
  init: init,
  define: define,
  remove: remove
}

Action.set({
  'sg-view': {
    init: function ($dom) {
      let vm_name = $dom.attr('sg-view')
      if (!vm_name) {
        return
      }
      let params = utils.getTagParams($dom)
      setTimeout(function () {
        View.require(vm_name, function (vm) {
          vm.render($dom, params)
        })
      }, 0)
    }
  }
})

export default View
