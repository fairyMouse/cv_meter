import $ from 'jquery'
import utils from './utils.js'

/**
 * 以try cache方式执行方法，忽略掉任何异常
 * @param  {Array} fns     函数数组
 * @param  {Array} args    参数数组
 * @param  {Object} context 在待执行的方法内部，this的指向
 * @return {Object} 返回执行的最后一个方法的返回值
 */
function safeExec (fns, args, context) {
  if (!$.isArray(fns)) {
    fns = [fns]
  }
  if (!args || (!$.isArray(args) && !args.callee)) {
    args = [args]
  }
  for (let i = 0; i < fns.length; i++) {
    fns[i] && fns[i].apply(context, args)
  }
}

/**
 * 根据名称生成事件数组的key
 * @param {String} name 事件名称
 * @return {String} 包装后的key
 */
function genKey (name) {
  return '~' + name
}

/**
 * 触发事件
 * @param {String} name 事件名称
 * @param {Object} data 事件对象
 * @param {Boolean} remove 事件触发完成后是否移除这个事件的所有监听
 * @param {Boolean} lastToFirst 是否从后向前触发事件的监听列表
 */
function fire (name, data, remove, lastToFirst) {
  let key = genKey(name)
  let me = this
  let list = me[key]
  if (list) {
    if (!data) data = {}
    if (!data.type) data.type = name
    let end = list.length
    let len = end - 1
    let idx
    let t
    while (end--) {
      idx = lastToFirst ? end : len - end
      t = list[idx]
      if (t.d || t.r) {
        list.splice(idx, 1)
        len--
      }
      if (!t.d) safeExec(t.f, data, me)
    }
  }
  if (remove) {
    delete me[key]
  }
  utils.log(name, 'EventFire')
}

/**
 * 绑定事件
 * @param {String} name 事件名称
 * @param {Function} fn 事件回调
 * @param {Integer|Boolean} insertOrRemove 事件监听插入的位置或触发后是否移除监听
 * @example
 * var T=Magix.mix({},Event);
 * T.on('done',function(e){
     *
     * });
 *
 * T.on('done',function(e){
     *
     * },0)//监听插入到开始位置
 *
 * T.on('done',function(e){
     *
     * },true)//触发后即删除该监听
 *
 * T.fire('done',{
     *     data:'test'
     * })
 */
function on (name, fn, insertOrRemove) {
  let key = genKey(name)
  let list = this[key] || (this[key] = [])
  if ($.type(insertOrRemove) === 'number') {
    list.splice(insertOrRemove, 0, {
      f: fn
    })
  } else {
    list.push({
      f: fn,
      r: insertOrRemove
    })
  }
  utils.log(name, 'EventOn')
}

/**
 * 解除事件绑定
 * @param {String} name 事件名称
 * @param {Function} fn 事件回调
 */
function un (name, fn) {
  let key = genKey(name)
  let list = this[key]
  if (list) {
    if (fn) {
      for (let i = list.length - 1, t; i >= 0; i--) {
        t = list[i]
        if (t.f === fn && !t.d) {
          t.d = 1
          break
        }
      }
    } else {
      delete this[key]
    }
  }
  utils.log(name, 'EventUn')
}

let Event = {
  init: function (obj) {
    $.extend(obj, {
      fire: fire,
      on: on,
      un: un
    })
  }
}

export default Event
