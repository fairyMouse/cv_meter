import $ from 'jquery'
import utils from './utils.js'
import View from './view.js'
import Event from './event.js'
import Action from './action.js'
let init_list = []
let components = {}

let instances = {
  id: 1,
  get: function ($dom, name) {
    if (!instances[name]) {
      instances[name] = {}
    }

    return instances[name][$dom.data('sg_component_' + name + '_id')]
  },
  put: function ($dom, name, component) {
    let id = instances.id++

    if (!instances[name]) {
      instances[name] = {}
    }

    instances[name][id] = component

    $dom.data('sg_component_' + name + '_id', id)

    return id
  },
  remove: function ($dom, name) {
    let id = $dom.data('sg_component_' + name + '_id')
    if (!id) {
      return
    }
    delete instances[name][id]
  }
}

let Component = {
  define: function (name, options) {
    if (!Component.isReady) {
      init_list.push({
        name: name,
        options: options
      })
      return
    }
    initComponent(name, options)
  }
}

Event.init(Component)

function initComponent (name, options) {
  if (components[name]) {
    utils.log(name, 'ComponentExisted', 1)
    return
  }
  let origin_destroy = options.onBeforeDestroy
  options.onBeforeDestroy = function (next) {
    // 删除组件实例引用
    let self = this
    if (self.$parent) {
      instances.remove(self.$parent, name)
    }
    utils.log(name, 'ComponentDestroy')
    if (origin_destroy) {
      origin_destroy.call(self, next)
    } else {
      next()
    }
  }
  if (!options.hasOwnProperty('keepDomBeforeRefresh')) {
    options.keepDomBeforeRefresh = false
  }
  View.define(name, options)
  components[name] = 1
  let creator = function ($dom, properties) {
    let instance
    if (!$dom || $.isPlainObject($dom)) {
      properties = $dom || {}
      instance = View.require(name)
      if (properties) {
        $.extend(instance, properties)
      }
      instance.render($('body'))
      Component.fire('ComponentCreate', {
        instance: instance
      })
      utils.log(name, 'ComponentCreate')
    } else {
      $dom && $dom.each && $dom.each(function () {
        let self = $(this)
        instance = instances.get(self, name)
        if (instance) {
          return
        }
        instance = View.require(name)
        if (properties) {
          $.extend(instance, properties)
        }
        instance.id = instances.put(self, name, instance)
        instance.render(self)
        Component.fire('ComponentCreate', {
          instance: instance
        })
        utils.log(name, 'ComponentCreate')
      })
    }
    return instance
  }
  // output usage
  creator.toString = function () {
    let opts = options.properties
    let key
    let value
    let list = []
    if (!opts) {
      list.push('sg.Component.' + name + '($dom)')
    } else {
      list.push('sg.Component.' + name + '($dom, {')
      for (key in opts) {
        if (opts.hasOwnProperty(key)) {
          if (key[0] === '_') {
            continue
          }
          value = opts[key]
          value = $.type(value) === 'string' ? '"' + value + '"'
            : $.type(value) === 'array' ? '[' + value.join(',') + ']'
              : $.type(value) === 'object' ? JSON.stringify(value)
                : $.type(value) === 'function' ? 'function() {}' : value
          list.push('\t' + key + ': ' + value + ',')
        }
      }
      value = list.length - 1
      if (value > 0) {
        list[value] = list[value].slice(0, -1)
      }
      list.push('});')
    }
    return list.join('\n')
  }
  Component[name] = creator
}

Component.toString = function () {
  let name
  let list = []
  for (name in components) {
    list.push('sg.Component.' + name)
  }
  return list.join('\n')
}

Component.init = function () {
  for (let i = 0, length = init_list.length; i < length; i++) {
    initComponent(init_list[i]['name'], init_list[i]['options'])
  }
}

Component.removeInstance = function ($dom, name) {
  instances.remove($dom, name)
}

Component.getInstances = function (name) {
  if (!name) {
    return instances
  }
  return instances[name]
}

Component.deps = ['View', 'Event']

Action.set({
  'sg-component': {
    init: function ($dom) {
      let vm_name = $dom.attr('sg-component')
      let params = utils.getTagParams($dom)
      try {
        Component[vm_name]($dom, params)
      } catch (err) {
        console.error('Component init failed: ' + vm_name + '\n' + err.message)
      }
    }
  }
})

export default Component
